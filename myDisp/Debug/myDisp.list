
myDisp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000769c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b54  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009390  08009390  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d68  200001f4  0800958c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f5c  0800958c  00021f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a326  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000341d  00000000  00000000  0003a54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f08  00000000  00000000  0003d968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d98  00000000  00000000  0003e870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a01  00000000  00000000  0003f608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff2a  00000000  00000000  00059009  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a343  00000000  00000000  00068f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e1c  00000000  00000000  000f32f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001f4 	.word	0x200001f4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800781c 	.word	0x0800781c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001f8 	.word	0x200001f8
 80001d4:	0800781c 	.word	0x0800781c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 ffc2 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80e 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8a6 	bl	8000634 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e8:	f000 f876 	bl	80005d8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 fbca 	bl	8006c84 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  myTest();
 80004f0:	f000 f8e4 	bl	80006bc <myTest>
	 // ssd1306_TestAll();
	  HAL_Delay(1000);
 80004f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f8:	f001 f826 	bl	8001548 <HAL_Delay>
	  myTest();
 80004fc:	e7f8      	b.n	80004f0 <main+0x18>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 f8c2 	bl	8007698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <SystemClock_Config+0xd0>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <SystemClock_Config+0xd0>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <SystemClock_Config+0xd0>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <SystemClock_Config+0xd4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <SystemClock_Config+0xd4>)
 800054a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SystemClock_Config+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800055c:	2303      	movs	r3, #3
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000578:	230f      	movs	r3, #15
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000584:	2305      	movs	r3, #5
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f003 f861 	bl	8003654 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000598:	f000 fa42 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fabc 	bl	8003b34 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005c2:	f000 fa2d 	bl	8000a20 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_I2C1_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000*4;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_I2C1_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_I2C1_Init+0x50>)
 8000616:	f001 fa4d 	bl	8001ab4 <HAL_I2C_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f9fe 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000628 	.word	0x20000628
 800062c:	40005400 	.word	0x40005400
 8000630:	00061a80 	.word	0x00061a80

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_GPIO_Init+0x84>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1d      	ldr	r2, [pc, #116]	; (80006b8 <MX_GPIO_Init+0x84>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_GPIO_Init+0x84>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_GPIO_Init+0x84>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <MX_GPIO_Init+0x84>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_GPIO_Init+0x84>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x84>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x84>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_GPIO_Init+0x84>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_GPIO_Init+0x84>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <MX_GPIO_Init+0x84>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_GPIO_Init+0x84>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800

080006bc <myTest>:

/* USER CODE BEGIN 4 */
void myTest()
{
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b096      	sub	sp, #88	; 0x58
 80006c0:	af02      	add	r7, sp, #8
	ssd1306_Init();
 80006c2:	f000 f9ed 	bl	8000aa0 <ssd1306_Init>
	ssd1306_Fill(Black);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fa54 	bl	8000b74 <ssd1306_Fill>
	ssd1306_WriteString("$Vasiliu$", Font_16x26, White);
 80006cc:	4aa4      	ldr	r2, [pc, #656]	; (8000960 <myTest+0x2a4>)
 80006ce:	2301      	movs	r3, #1
 80006d0:	ca06      	ldmia	r2, {r1, r2}
 80006d2:	48a4      	ldr	r0, [pc, #656]	; (8000964 <myTest+0x2a8>)
 80006d4:	f000 fb7e 	bl	8000dd4 <ssd1306_WriteString>
	char str[] ="My name is Vasiliu pupkin, I live in Ukraine!!!";
 80006d8:	4ba3      	ldr	r3, [pc, #652]	; (8000968 <myTest+0x2ac>)
 80006da:	f107 0408 	add.w	r4, r7, #8
 80006de:	461d      	mov	r5, r3
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i=0; i<sizeof(str); i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006f4:	e014      	b.n	8000720 <myTest+0x64>
	{
		ssd1306_SetCursor(2, 30);
 80006f6:	211e      	movs	r1, #30
 80006f8:	2002      	movs	r0, #2
 80006fa:	f000 fb91 	bl	8000e20 <ssd1306_SetCursor>
		ssd1306_WriteString(str+i, Font_7x10, White);
 80006fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000700:	f107 0208 	add.w	r2, r7, #8
 8000704:	18d0      	adds	r0, r2, r3
 8000706:	4a99      	ldr	r2, [pc, #612]	; (800096c <myTest+0x2b0>)
 8000708:	2301      	movs	r3, #1
 800070a:	ca06      	ldmia	r2, {r1, r2}
 800070c:	f000 fb62 	bl	8000dd4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000710:	f000 fa52 	bl	8000bb8 <ssd1306_UpdateScreen>
		HAL_Delay(50);
 8000714:	2032      	movs	r0, #50	; 0x32
 8000716:	f000 ff17 	bl	8001548 <HAL_Delay>
	for(int i=0; i<sizeof(str); i++)
 800071a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800071c:	3301      	adds	r3, #1
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000722:	2b2f      	cmp	r3, #47	; 0x2f
 8000724:	d9e7      	bls.n	80006f6 <myTest+0x3a>
	}
	HAL_Delay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f000 ff0d 	bl	8001548 <HAL_Delay>
	ssd1306_Fill(Black);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fa20 	bl	8000b74 <ssd1306_Fill>
	float c = 1;
 8000734:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i<20; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
 800073e:	e015      	b.n	800076c <myTest+0xb0>
	{
		ssd1306_DrawRectangle(0+i, 0+i, 50+i, 50+i, White);
 8000740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000742:	b2d8      	uxtb	r0, r3
 8000744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000746:	b2d9      	uxtb	r1, r3
 8000748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3332      	adds	r3, #50	; 0x32
 800074e:	b2da      	uxtb	r2, r3
 8000750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3332      	adds	r3, #50	; 0x32
 8000756:	b2dc      	uxtb	r4, r3
 8000758:	2301      	movs	r3, #1
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4623      	mov	r3, r4
 800075e:	f000 fc6b 	bl	8001038 <ssd1306_DrawRectangle>
		ssd1306_UpdateScreen();
 8000762:	f000 fa29 	bl	8000bb8 <ssd1306_UpdateScreen>
	for(int i=0; i<20; i++)
 8000766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000768:	3301      	adds	r3, #1
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
 800076c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800076e:	2b13      	cmp	r3, #19
 8000770:	dde6      	ble.n	8000740 <myTest+0x84>
	}
	for(int i=0; i<20; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	647b      	str	r3, [r7, #68]	; 0x44
 8000776:	e015      	b.n	80007a4 <myTest+0xe8>
	{
		ssd1306_DrawRectangle(0+i, 0+i, 50+i, 50+i, Black);
 8000778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800077a:	b2d8      	uxtb	r0, r3
 800077c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800077e:	b2d9      	uxtb	r1, r3
 8000780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3332      	adds	r3, #50	; 0x32
 8000786:	b2da      	uxtb	r2, r3
 8000788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3332      	adds	r3, #50	; 0x32
 800078e:	b2dc      	uxtb	r4, r3
 8000790:	2300      	movs	r3, #0
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4623      	mov	r3, r4
 8000796:	f000 fc4f 	bl	8001038 <ssd1306_DrawRectangle>
		ssd1306_UpdateScreen();
 800079a:	f000 fa0d 	bl	8000bb8 <ssd1306_UpdateScreen>
	for(int i=0; i<20; i++)
 800079e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007a0:	3301      	adds	r3, #1
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
 80007a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007a6:	2b13      	cmp	r3, #19
 80007a8:	dde6      	ble.n	8000778 <myTest+0xbc>
	}
	for(int i=0; i<20; i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	643b      	str	r3, [r7, #64]	; 0x40
 80007ae:	e055      	b.n	800085c <myTest+0x1a0>
	{
		ssd1306_DrawRectangle(20*c+i, 20*c+i, 70*c-i, 70*c-i, White);
 80007b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80007b4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80007b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007be:	ee07 3a90 	vmov	s15, r3
 80007c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80007d2:	793b      	ldrb	r3, [r7, #4]
 80007d4:	b2d8      	uxtb	r0, r3
 80007d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80007da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80007de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e4:	ee07 3a90 	vmov	s15, r3
 80007e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80007f8:	793b      	ldrb	r3, [r7, #4]
 80007fa:	b2d9      	uxtb	r1, r3
 80007fc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000800:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000970 <myTest+0x2b4>
 8000804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800081a:	edc7 7a01 	vstr	s15, [r7, #4]
 800081e:	793b      	ldrb	r3, [r7, #4]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000826:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000970 <myTest+0x2b4>
 800082a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800082e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000830:	ee07 3a90 	vmov	s15, r3
 8000834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800083c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000840:	edc7 7a01 	vstr	s15, [r7, #4]
 8000844:	793b      	ldrb	r3, [r7, #4]
 8000846:	b2dc      	uxtb	r4, r3
 8000848:	2301      	movs	r3, #1
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4623      	mov	r3, r4
 800084e:	f000 fbf3 	bl	8001038 <ssd1306_DrawRectangle>
		ssd1306_UpdateScreen();
 8000852:	f000 f9b1 	bl	8000bb8 <ssd1306_UpdateScreen>
	for(int i=0; i<20; i++)
 8000856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000858:	3301      	adds	r3, #1
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
 800085c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800085e:	2b13      	cmp	r3, #19
 8000860:	dda6      	ble.n	80007b0 <myTest+0xf4>
	}
	for(int i=0; i<20; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000866:	e055      	b.n	8000914 <myTest+0x258>
		{
		ssd1306_DrawRectangle(20*c+i, 20*c+i, 70*c-i, 70*c-i, Black);
 8000868:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800086c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000870:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000876:	ee07 3a90 	vmov	s15, r3
 800087a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000886:	edc7 7a01 	vstr	s15, [r7, #4]
 800088a:	793b      	ldrb	r3, [r7, #4]
 800088c:	b2d8      	uxtb	r0, r3
 800088e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000892:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000896:	ee27 7a87 	vmul.f32	s14, s15, s14
 800089a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b2d9      	uxtb	r1, r3
 80008b4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80008b8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000970 <myTest+0x2b4>
 80008bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80008d6:	793b      	ldrb	r3, [r7, #4]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80008de:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000970 <myTest+0x2b4>
 80008e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80008fc:	793b      	ldrb	r3, [r7, #4]
 80008fe:	b2dc      	uxtb	r4, r3
 8000900:	2300      	movs	r3, #0
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	4623      	mov	r3, r4
 8000906:	f000 fb97 	bl	8001038 <ssd1306_DrawRectangle>
		ssd1306_UpdateScreen();
 800090a:	f000 f955 	bl	8000bb8 <ssd1306_UpdateScreen>
	for(int i=0; i<20; i++)
 800090e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000910:	3301      	adds	r3, #1
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000916:	2b13      	cmp	r3, #19
 8000918:	dda6      	ble.n	8000868 <myTest+0x1ac>
		}
	ssd1306_UpdateScreen();
 800091a:	f000 f94d 	bl	8000bb8 <ssd1306_UpdateScreen>
	ssd1306_TestRectangle();
 800091e:	f000 fc0d 	bl	800113c <ssd1306_TestRectangle>
	{
		  HAL_Delay(50);
 8000922:	2032      	movs	r0, #50	; 0x32
 8000924:	f000 fe10 	bl	8001548 <HAL_Delay>
		  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,Black);
 8000928:	2300      	movs	r3, #0
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	233f      	movs	r3, #63	; 0x3f
 800092e:	227f      	movs	r2, #127	; 0x7f
 8000930:	2101      	movs	r1, #1
 8000932:	2001      	movs	r0, #1
 8000934:	f000 fa8c 	bl	8000e50 <ssd1306_Line>
		  ssd1306_UpdateScreen();
 8000938:	f000 f93e 	bl	8000bb8 <ssd1306_UpdateScreen>
		  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,Black);
 800093c:	2300      	movs	r3, #0
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	233f      	movs	r3, #63	; 0x3f
 8000942:	2201      	movs	r2, #1
 8000944:	2101      	movs	r1, #1
 8000946:	207f      	movs	r0, #127	; 0x7f
 8000948:	f000 fa82 	bl	8000e50 <ssd1306_Line>
		  ssd1306_UpdateScreen();
 800094c:	f000 f934 	bl	8000bb8 <ssd1306_UpdateScreen>
	}
	testCir();
 8000950:	f000 f810 	bl	8000974 <testCir>
	testCirb();
 8000954:	f000 f839 	bl	80009ca <testCirb>
}
 8000958:	bf00      	nop
 800095a:	3750      	adds	r7, #80	; 0x50
 800095c:	46bd      	mov	sp, r7
 800095e:	bdb0      	pop	{r4, r5, r7, pc}
 8000960:	20000008 	.word	0x20000008
 8000964:	08007834 	.word	0x08007834
 8000968:	08007840 	.word	0x08007840
 800096c:	20000000 	.word	0x20000000
 8000970:	428c0000 	.word	0x428c0000

08000974 <testCir>:
/* USER CODE END 4 */
void testCir()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	for(int delta = 0; delta < 50; delta ++)
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e00b      	b.n	8000998 <testCir+0x24>
	{
		ssd1306_DrawCircle(SSD1306_WIDTH/2, SSD1306_HEIGHT/2, delta, White);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	2301      	movs	r3, #1
 8000986:	2120      	movs	r1, #32
 8000988:	2040      	movs	r0, #64	; 0x40
 800098a:	f000 facd 	bl	8000f28 <ssd1306_DrawCircle>
		ssd1306_UpdateScreen();
 800098e:	f000 f913 	bl	8000bb8 <ssd1306_UpdateScreen>
	for(int delta = 0; delta < 50; delta ++)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b31      	cmp	r3, #49	; 0x31
 800099c:	ddf0      	ble.n	8000980 <testCir+0xc>
	}
	for(int delta = 0; delta < 50; delta ++)
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	e00b      	b.n	80009bc <testCir+0x48>
	{
		ssd1306_DrawCircle(SSD1306_WIDTH/2, SSD1306_HEIGHT/2, delta, Black);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	2120      	movs	r1, #32
 80009ac:	2040      	movs	r0, #64	; 0x40
 80009ae:	f000 fabb 	bl	8000f28 <ssd1306_DrawCircle>
		ssd1306_UpdateScreen();
 80009b2:	f000 f901 	bl	8000bb8 <ssd1306_UpdateScreen>
	for(int delta = 0; delta < 50; delta ++)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	2b31      	cmp	r3, #49	; 0x31
 80009c0:	ddf0      	ble.n	80009a4 <testCir+0x30>
	}

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <testCirb>:
void testCirb()
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
	for(int delta=50; delta>0; delta--)
 80009d0:	2332      	movs	r3, #50	; 0x32
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	e00b      	b.n	80009ee <testCirb+0x24>
	{
		ssd1306_DrawCircle(SSD1306_WIDTH/2, SSD1306_HEIGHT/2, delta, White);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	2301      	movs	r3, #1
 80009dc:	2120      	movs	r1, #32
 80009de:	2040      	movs	r0, #64	; 0x40
 80009e0:	f000 faa2 	bl	8000f28 <ssd1306_DrawCircle>
		ssd1306_UpdateScreen();
 80009e4:	f000 f8e8 	bl	8000bb8 <ssd1306_UpdateScreen>
	for(int delta=50; delta>0; delta--)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dcf0      	bgt.n	80009d6 <testCirb+0xc>
	}
	for(int delta=50; delta>0; delta--)
 80009f4:	2332      	movs	r3, #50	; 0x32
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	e00b      	b.n	8000a12 <testCirb+0x48>
	{
		ssd1306_DrawCircle(SSD1306_WIDTH/2, SSD1306_HEIGHT/2, delta, Black);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2120      	movs	r1, #32
 8000a02:	2040      	movs	r0, #64	; 0x40
 8000a04:	f000 fa90 	bl	8000f28 <ssd1306_DrawCircle>
		ssd1306_UpdateScreen();
 8000a08:	f000 f8d6 	bl	8000bb8 <ssd1306_UpdateScreen>
	for(int delta=50; delta>0; delta--)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dcf0      	bgt.n	80009fa <testCirb+0x30>
	}

}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af04      	add	r7, sp, #16
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2301      	movs	r3, #1
 8000a56:	2200      	movs	r2, #0
 8000a58:	2178      	movs	r1, #120	; 0x78
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <ssd1306_WriteCommand+0x2c>)
 8000a5c:	f001 f962 	bl	8001d24 <HAL_I2C_Mem_Write>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000628 	.word	0x20000628

08000a6c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a7e:	9202      	str	r2, [sp, #8]
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2301      	movs	r3, #1
 8000a88:	2240      	movs	r2, #64	; 0x40
 8000a8a:	2178      	movs	r1, #120	; 0x78
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <ssd1306_WriteData+0x30>)
 8000a8e:	f001 f949 	bl	8001d24 <HAL_I2C_Mem_Write>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000628 	.word	0x20000628

08000aa0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000aa4:	f7ff ffc3 	bl	8000a2e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	f000 fd4d 	bl	8001548 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fb0c 	bl	80010cc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ab4:	2020      	movs	r0, #32
 8000ab6:	f7ff ffc1 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff ffbe 	bl	8000a3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ac0:	20b0      	movs	r0, #176	; 0xb0
 8000ac2:	f7ff ffbb 	bl	8000a3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ac6:	20c8      	movs	r0, #200	; 0xc8
 8000ac8:	f7ff ffb8 	bl	8000a3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff ffb5 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000ad2:	2010      	movs	r0, #16
 8000ad4:	f7ff ffb2 	bl	8000a3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ad8:	2040      	movs	r0, #64	; 0x40
 8000ada:	f7ff ffaf 	bl	8000a3c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ade:	20ff      	movs	r0, #255	; 0xff
 8000ae0:	f000 fae1 	bl	80010a6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ae4:	20a1      	movs	r0, #161	; 0xa1
 8000ae6:	f7ff ffa9 	bl	8000a3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000aea:	20a6      	movs	r0, #166	; 0xa6
 8000aec:	f7ff ffa6 	bl	8000a3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000af0:	20a8      	movs	r0, #168	; 0xa8
 8000af2:	f7ff ffa3 	bl	8000a3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000af6:	203f      	movs	r0, #63	; 0x3f
 8000af8:	f7ff ffa0 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000afc:	20a4      	movs	r0, #164	; 0xa4
 8000afe:	f7ff ff9d 	bl	8000a3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000b02:	20d3      	movs	r0, #211	; 0xd3
 8000b04:	f7ff ff9a 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff ff97 	bl	8000a3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b0e:	20d5      	movs	r0, #213	; 0xd5
 8000b10:	f7ff ff94 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000b14:	20f0      	movs	r0, #240	; 0xf0
 8000b16:	f7ff ff91 	bl	8000a3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000b1a:	20d9      	movs	r0, #217	; 0xd9
 8000b1c:	f7ff ff8e 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000b20:	2022      	movs	r0, #34	; 0x22
 8000b22:	f7ff ff8b 	bl	8000a3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000b26:	20da      	movs	r0, #218	; 0xda
 8000b28:	f7ff ff88 	bl	8000a3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000b2c:	2012      	movs	r0, #18
 8000b2e:	f7ff ff85 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000b32:	20db      	movs	r0, #219	; 0xdb
 8000b34:	f7ff ff82 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000b38:	2020      	movs	r0, #32
 8000b3a:	f7ff ff7f 	bl	8000a3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000b3e:	208d      	movs	r0, #141	; 0x8d
 8000b40:	f7ff ff7c 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000b44:	2014      	movs	r0, #20
 8000b46:	f7ff ff79 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 fabe 	bl	80010cc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 f80f 	bl	8000b74 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000b56:	f000 f82f 	bl	8000bb8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <ssd1306_Init+0xd0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <ssd1306_Init+0xd0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000b66:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <ssd1306_Init+0xd0>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	715a      	strb	r2, [r3, #5]
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000610 	.word	0x20000610

08000b74 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e00d      	b.n	8000ba0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <ssd1306_Fill+0x1a>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	e000      	b.n	8000b90 <ssd1306_Fill+0x1c>
 8000b8e:	21ff      	movs	r1, #255	; 0xff
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <ssd1306_Fill+0x40>)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4413      	add	r3, r2
 8000b96:	460a      	mov	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba6:	d3ed      	bcc.n	8000b84 <ssd1306_Fill+0x10>
    }
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	20000210 	.word	0x20000210

08000bb8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e016      	b.n	8000bf2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	3b50      	subs	r3, #80	; 0x50
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff36 	bl	8000a3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ff33 	bl	8000a3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000bd6:	2010      	movs	r0, #16
 8000bd8:	f7ff ff30 	bl	8000a3c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	01db      	lsls	r3, r3, #7
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <ssd1306_UpdateScreen+0x48>)
 8000be2:	4413      	add	r3, r2
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff40 	bl	8000a6c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d9e5      	bls.n	8000bc4 <ssd1306_UpdateScreen+0xc>
    }
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000210 	.word	0x20000210

08000c04 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	71bb      	strb	r3, [r7, #6]
 8000c12:	4613      	mov	r3, r2
 8000c14:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db48      	blt.n	8000cb0 <ssd1306_DrawPixel+0xac>
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	2b3f      	cmp	r3, #63	; 0x3f
 8000c22:	d845      	bhi.n	8000cb0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <ssd1306_DrawPixel+0xb8>)
 8000c26:	791b      	ldrb	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000c2c:	797b      	ldrb	r3, [r7, #5]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d11a      	bne.n	8000c76 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c40:	79fa      	ldrb	r2, [r7, #7]
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	08db      	lsrs	r3, r3, #3
 8000c46:	b2d8      	uxtb	r0, r3
 8000c48:	4603      	mov	r3, r0
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <ssd1306_DrawPixel+0xbc>)
 8000c50:	5cd3      	ldrb	r3, [r2, r3]
 8000c52:	b25a      	sxtb	r2, r3
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b259      	sxtb	r1, r3
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	01db      	lsls	r3, r3, #7
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b2c9      	uxtb	r1, r1
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <ssd1306_DrawPixel+0xbc>)
 8000c72:	54d1      	strb	r1, [r2, r3]
 8000c74:	e01d      	b.n	8000cb2 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	01db      	lsls	r3, r3, #7
 8000c82:	4413      	add	r3, r2
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <ssd1306_DrawPixel+0xbc>)
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	2101      	movs	r1, #1
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	b259      	sxtb	r1, r3
 8000ca0:	79fa      	ldrb	r2, [r7, #7]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	01db      	lsls	r3, r3, #7
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2c9      	uxtb	r1, r1
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <ssd1306_DrawPixel+0xbc>)
 8000cac:	54d1      	strb	r1, [r2, r3]
 8000cae:	e000      	b.n	8000cb2 <ssd1306_DrawPixel+0xae>
        return;
 8000cb0:	bf00      	nop
    }
}
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	20000610 	.word	0x20000610
 8000cc0:	20000210 	.word	0x20000210

08000cc4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4604      	mov	r4, r0
 8000ccc:	1d38      	adds	r0, r7, #4
 8000cce:	e880 0006 	stmia.w	r0, {r1, r2}
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4623      	mov	r3, r4
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b1f      	cmp	r3, #31
 8000ce0:	d902      	bls.n	8000ce8 <ssd1306_WriteChar+0x24>
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b7e      	cmp	r3, #126	; 0x7e
 8000ce6:	d901      	bls.n	8000cec <ssd1306_WriteChar+0x28>
        return 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e06d      	b.n	8000dc8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000cec:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <ssd1306_WriteChar+0x10c>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	793b      	ldrb	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2b80      	cmp	r3, #128	; 0x80
 8000cf8:	dc06      	bgt.n	8000d08 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <ssd1306_WriteChar+0x10c>)
 8000cfc:	885b      	ldrh	r3, [r3, #2]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000d04:	2b40      	cmp	r3, #64	; 0x40
 8000d06:	dd01      	ble.n	8000d0c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e05d      	b.n	8000dc8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	e04c      	b.n	8000dac <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	3b20      	subs	r3, #32
 8000d18:	7979      	ldrb	r1, [r7, #5]
 8000d1a:	fb01 f303 	mul.w	r3, r1, r3
 8000d1e:	4619      	mov	r1, r3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	440b      	add	r3, r1
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	e034      	b.n	8000d9c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d012      	beq.n	8000d68 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <ssd1306_WriteChar+0x10c>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2d8      	uxtb	r0, r3
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <ssd1306_WriteChar+0x10c>)
 8000d52:	885b      	ldrh	r3, [r3, #2]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	7bba      	ldrb	r2, [r7, #14]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f7ff ff4f 	bl	8000c04 <ssd1306_DrawPixel>
 8000d66:	e016      	b.n	8000d96 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <ssd1306_WriteChar+0x10c>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4413      	add	r3, r2
 8000d74:	b2d8      	uxtb	r0, r3
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <ssd1306_WriteChar+0x10c>)
 8000d78:	885b      	ldrh	r3, [r3, #2]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	b2d9      	uxtb	r1, r3
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf0c      	ite	eq
 8000d8a:	2301      	moveq	r3, #1
 8000d8c:	2300      	movne	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	f7ff ff37 	bl	8000c04 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	793b      	ldrb	r3, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d3c5      	bcc.n	8000d32 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3301      	adds	r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	797b      	ldrb	r3, [r7, #5]
 8000dae:	461a      	mov	r2, r3
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d3ad      	bcc.n	8000d12 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <ssd1306_WriteChar+0x10c>)
 8000db8:	881a      	ldrh	r2, [r3, #0]
 8000dba:	793b      	ldrb	r3, [r7, #4]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <ssd1306_WriteChar+0x10c>)
 8000dc4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3724      	adds	r7, #36	; 0x24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	20000610 	.word	0x20000610

08000dd4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	1d38      	adds	r0, r7, #4
 8000dde:	e880 0006 	stmia.w	r0, {r1, r2}
 8000de2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000de4:	e012      	b.n	8000e0c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	7818      	ldrb	r0, [r3, #0]
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	1d3a      	adds	r2, r7, #4
 8000dee:	ca06      	ldmia	r2, {r1, r2}
 8000df0:	f7ff ff68 	bl	8000cc4 <ssd1306_WriteChar>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d002      	beq.n	8000e06 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	e008      	b.n	8000e18 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e8      	bne.n	8000de6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	781b      	ldrb	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <ssd1306_SetCursor+0x2c>)
 8000e36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <ssd1306_SetCursor+0x2c>)
 8000e3e:	805a      	strh	r2, [r3, #2]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	20000610 	.word	0x20000610

08000e50 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4604      	mov	r4, r0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4623      	mov	r3, r4
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	4603      	mov	r3, r0
 8000e64:	71bb      	strb	r3, [r7, #6]
 8000e66:	460b      	mov	r3, r1
 8000e68:	717b      	strb	r3, [r7, #5]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8000e6e:	797a      	ldrb	r2, [r7, #5]
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bfb8      	it	lt
 8000e78:	425b      	neglt	r3, r3
 8000e7a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8000e7c:	793a      	ldrb	r2, [r7, #4]
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bfb8      	it	lt
 8000e86:	425b      	neglt	r3, r3
 8000e88:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	797b      	ldrb	r3, [r7, #5]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d201      	bcs.n	8000e96 <ssd1306_Line+0x46>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e001      	b.n	8000e9a <ssd1306_Line+0x4a>
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8000e9c:	79ba      	ldrb	r2, [r7, #6]
 8000e9e:	793b      	ldrb	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d201      	bcs.n	8000ea8 <ssd1306_Line+0x58>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e001      	b.n	8000eac <ssd1306_Line+0x5c>
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eac:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8000eb6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000eba:	7939      	ldrb	r1, [r7, #4]
 8000ebc:	797b      	ldrb	r3, [r7, #5]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fea0 	bl	8000c04 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8000ec4:	e024      	b.n	8000f10 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8000ec6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000eca:	79b9      	ldrb	r1, [r7, #6]
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fe98 	bl	8000c04 <ssd1306_DrawPixel>
    error2 = error * 2;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	425b      	negs	r3, r3
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dd08      	ble.n	8000ef6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	da08      	bge.n	8000f10 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	4413      	add	r3, r2
 8000f04:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8000f10:	79fa      	ldrb	r2, [r7, #7]
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d1d6      	bne.n	8000ec6 <ssd1306_Line+0x76>
 8000f18:	79ba      	ldrb	r2, [r7, #6]
 8000f1a:	793b      	ldrb	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d1d2      	bne.n	8000ec6 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8000f20:	bf00      	nop
}
 8000f22:	3724      	adds	r7, #36	; 0x24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd90      	pop	{r4, r7, pc}

08000f28 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	717b      	strb	r3, [r7, #5]
 8000f42:	4613      	mov	r3, r2
 8000f44:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	425b      	negs	r3, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8000f50:	797b      	ldrb	r3, [r7, #5]
 8000f52:	f1c3 0301 	rsb	r3, r3, #1
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db66      	blt.n	8001030 <ssd1306_DrawCircle+0x108>
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	2b3f      	cmp	r3, #63	; 0x3f
 8000f66:	d863      	bhi.n	8001030 <ssd1306_DrawCircle+0x108>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b2d8      	uxtb	r0, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	793a      	ldrb	r2, [r7, #4]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fe40 	bl	8000c04 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4413      	add	r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	793a      	ldrb	r2, [r7, #4]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fe32 	bl	8000c04 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2d8      	uxtb	r0, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	79ba      	ldrb	r2, [r7, #6]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	793a      	ldrb	r2, [r7, #4]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fe24 	bl	8000c04 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	79fa      	ldrb	r2, [r7, #7]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	b2d8      	uxtb	r0, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	79ba      	ldrb	r2, [r7, #6]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	793a      	ldrb	r2, [r7, #4]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fe16 	bl	8000c04 <ssd1306_DrawPixel>
        e2 = err;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dc13      	bgt.n	800100c <ssd1306_DrawCircle+0xe4>
            y++;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	3301      	adds	r3, #1
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d105      	bne.n	800100c <ssd1306_DrawCircle+0xe4>
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	dc01      	bgt.n	800100c <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	dd08      	ble.n	8001026 <ssd1306_DrawCircle+0xfe>
          x++;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	3301      	adds	r3, #1
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b00      	cmp	r3, #0
 800102a:	dd9d      	ble.n	8000f68 <ssd1306_DrawCircle+0x40>

    return;
 800102c:	bf00      	nop
 800102e:	e000      	b.n	8001032 <ssd1306_DrawCircle+0x10a>
    return;
 8001030:	bf00      	nop
}
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}

08001038 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b085      	sub	sp, #20
 800103c:	af02      	add	r7, sp, #8
 800103e:	4604      	mov	r4, r0
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4623      	mov	r3, r4
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	4603      	mov	r3, r0
 800104c:	71bb      	strb	r3, [r7, #6]
 800104e:	460b      	mov	r3, r1
 8001050:	717b      	strb	r3, [r7, #5]
 8001052:	4613      	mov	r3, r2
 8001054:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8001056:	79bc      	ldrb	r4, [r7, #6]
 8001058:	797a      	ldrb	r2, [r7, #5]
 800105a:	79b9      	ldrb	r1, [r7, #6]
 800105c:	79f8      	ldrb	r0, [r7, #7]
 800105e:	7e3b      	ldrb	r3, [r7, #24]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4623      	mov	r3, r4
 8001064:	f7ff fef4 	bl	8000e50 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8001068:	793c      	ldrb	r4, [r7, #4]
 800106a:	797a      	ldrb	r2, [r7, #5]
 800106c:	79b9      	ldrb	r1, [r7, #6]
 800106e:	7978      	ldrb	r0, [r7, #5]
 8001070:	7e3b      	ldrb	r3, [r7, #24]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4623      	mov	r3, r4
 8001076:	f7ff feeb 	bl	8000e50 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800107a:	793c      	ldrb	r4, [r7, #4]
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	7939      	ldrb	r1, [r7, #4]
 8001080:	7978      	ldrb	r0, [r7, #5]
 8001082:	7e3b      	ldrb	r3, [r7, #24]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4623      	mov	r3, r4
 8001088:	f7ff fee2 	bl	8000e50 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 800108c:	79bc      	ldrb	r4, [r7, #6]
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	7939      	ldrb	r1, [r7, #4]
 8001092:	79f8      	ldrb	r0, [r7, #7]
 8001094:	7e3b      	ldrb	r3, [r7, #24]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	4623      	mov	r3, r4
 800109a:	f7ff fed9 	bl	8000e50 <ssd1306_Line>

  return;
 800109e:	bf00      	nop
}
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd90      	pop	{r4, r7, pc}

080010a6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80010b0:	2381      	movs	r3, #129	; 0x81
 80010b2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fcc0 	bl	8000a3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fcbc 	bl	8000a3c <ssd1306_WriteCommand>
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80010dc:	23af      	movs	r3, #175	; 0xaf
 80010de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <ssd1306_SetDisplayOn+0x38>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	719a      	strb	r2, [r3, #6]
 80010e6:	e004      	b.n	80010f2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80010e8:	23ae      	movs	r3, #174	; 0xae
 80010ea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <ssd1306_SetDisplayOn+0x38>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fca1 	bl	8000a3c <ssd1306_WriteCommand>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000610 	.word	0x20000610

08001108 <ssd1306_TestLine>:
    ssd1306_SetCursor(2, 18);
    ssd1306_WriteString(buff, Font_11x18, Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestLine() {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 800110e:	2301      	movs	r3, #1
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	233f      	movs	r3, #63	; 0x3f
 8001114:	227f      	movs	r2, #127	; 0x7f
 8001116:	2101      	movs	r1, #1
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff fe99 	bl	8000e50 <ssd1306_Line>
  ssd1306_UpdateScreen();
 800111e:	f7ff fd4b 	bl	8000bb8 <ssd1306_UpdateScreen>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8001122:	2301      	movs	r3, #1
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	233f      	movs	r3, #63	; 0x3f
 8001128:	2201      	movs	r2, #1
 800112a:	2101      	movs	r1, #1
 800112c:	207f      	movs	r0, #127	; 0x7f
 800112e:	f7ff fe8f 	bl	8000e50 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8001132:	f7ff fd41 	bl	8000bb8 <ssd1306_UpdateScreen>
  return;
 8001136:	bf00      	nop
}
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b085      	sub	sp, #20
 8001140:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 7; delta ++)
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	e02e      	b.n	80011a6 <ssd1306_TestRectangle+0x6a>
  {
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	4413      	add	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	3301      	adds	r3, #1
 8001156:	b2d8      	uxtb	r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4413      	add	r3, r2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	3301      	adds	r3, #1
 8001166:	b2d9      	uxtb	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4413      	add	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461c      	mov	r4, r3
 8001180:	00a4      	lsls	r4, r4, #2
 8001182:	4423      	add	r3, r4
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800118a:	b2dc      	uxtb	r4, r3
 800118c:	2301      	movs	r3, #1
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4623      	mov	r3, r4
 8001192:	f7ff ff51 	bl	8001038 <ssd1306_DrawRectangle>
    ssd1306_UpdateScreen();
 8001196:	f7ff fd0f 	bl	8000bb8 <ssd1306_UpdateScreen>
    HAL_Delay(50);
 800119a:	2032      	movs	r0, #50	; 0x32
 800119c:	f000 f9d4 	bl	8001548 <HAL_Delay>
  for(delta = 0; delta < 7; delta ++)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3301      	adds	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b06      	cmp	r3, #6
 80011aa:	d9cd      	bls.n	8001148 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_TestLine();
 80011ac:	f7ff ffac 	bl	8001108 <ssd1306_TestLine>
  for(delta = 0; delta < 7; delta ++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	e02e      	b.n	8001214 <ssd1306_TestRectangle+0xd8>
  {
	  ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),Black);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	4413      	add	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2d8      	uxtb	r0, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2d9      	uxtb	r1, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4413      	add	r3, r2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461c      	mov	r4, r3
 80011ee:	00a4      	lsls	r4, r4, #2
 80011f0:	4423      	add	r3, r4
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80011f8:	b2dc      	uxtb	r4, r3
 80011fa:	2300      	movs	r3, #0
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	4623      	mov	r3, r4
 8001200:	f7ff ff1a 	bl	8001038 <ssd1306_DrawRectangle>
	  ssd1306_UpdateScreen();
 8001204:	f7ff fcd8 	bl	8000bb8 <ssd1306_UpdateScreen>
	  HAL_Delay(50);
 8001208:	2032      	movs	r0, #50	; 0x32
 800120a:	f000 f99d 	bl	8001548 <HAL_Delay>
  for(delta = 0; delta < 7; delta ++)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3301      	adds	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d9cd      	bls.n	80011b6 <ssd1306_TestRectangle+0x7a>
  }
  ssd1306_UpdateScreen();
 800121a:	f7ff fccd 	bl	8000bb8 <ssd1306_UpdateScreen>
  return;
 800121e:	bf00      	nop
}
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
	...

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_MspInit+0x4c>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x4c>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_I2C_MspInit+0x84>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12b      	bne.n	80012f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b6:	23c0      	movs	r3, #192	; 0xc0
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ba:	2312      	movs	r3, #18
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012c6:	2304      	movs	r3, #4
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <HAL_I2C_MspInit+0x8c>)
 80012d2:	f000 fa6d 	bl	80017b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_I2C_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40005400 	.word	0x40005400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f8d4 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <OTG_FS_IRQHandler+0x10>)
 800136a:	f001 f940 	bl	80025ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20001b50 	.word	0x20001b50

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f006 f93c 	bl	8007624 <__errno>
 80013ac:	4602      	mov	r2, r0
 80013ae:	230c      	movs	r3, #12
 80013b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20020000 	.word	0x20020000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000618 	.word	0x20000618
 80013e0:	20001f60 	.word	0x20001f60

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <SystemInit+0x28>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <SystemInit+0x28>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <SystemInit+0x28>)
 80013fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001416:	e003      	b.n	8001420 <LoopCopyDataInit>

08001418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800141a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800141c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800141e:	3104      	adds	r1, #4

08001420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001428:	d3f6      	bcc.n	8001418 <CopyDataInit>
  ldr  r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800142c:	e002      	b.n	8001434 <LoopFillZerobss>

0800142e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800142e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001430:	f842 3b04 	str.w	r3, [r2], #4

08001434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001438:	d3f9      	bcc.n	800142e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800143a:	f7ff ffd3 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f006 f8f7 	bl	8007630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff f849 	bl	80004d8 <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001448:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800144c:	08009398 	.word	0x08009398
  ldr  r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001454:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001458:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 800145c:	20001f5c 	.word	0x20001f5c

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f94d 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fec6 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f965 	bl	8001796 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e4:	f000 f92d 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000010 	.word	0x20000010
 8001500:	20000018 	.word	0x20000018
 8001504:	20000014 	.word	0x20000014

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000018 	.word	0x20000018
 800152c:	2000067c 	.word	0x2000067c

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000067c 	.word	0x2000067c

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_Delay+0x40>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000018 	.word	0x20000018

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <__NVIC_EnableIRQ+0x38>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800170c:	f7ff ff8e 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff29 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff3e 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff8e 	bl	8001680 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5d 	bl	800162c <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff31 	bl	80015f0 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa2 	bl	80016e8 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e159      	b.n	8001a80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8148 	bne.w	8001a7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d00b      	beq.n	800180a <HAL_GPIO_Init+0x5a>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fe:	2b11      	cmp	r3, #17
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b12      	cmp	r3, #18
 8001808:	d130      	bne.n	800186c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 0201 	and.w	r2, r3, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0xfc>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a2 	beq.w	8001a7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <HAL_GPIO_Init+0x2e4>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a55      	ldr	r2, [pc, #340]	; (8001a94 <HAL_GPIO_Init+0x2e4>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_GPIO_Init+0x2e4>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a51      	ldr	r2, [pc, #324]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_GPIO_Init+0x2ec>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x202>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x1fe>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <HAL_GPIO_Init+0x2f4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x1fa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <HAL_GPIO_Init+0x2f8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x1f6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a44      	ldr	r2, [pc, #272]	; (8001aac <HAL_GPIO_Init+0x2fc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x1f2>
 800199e:	2304      	movs	r3, #4
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a2:	2307      	movs	r3, #7
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4934      	ldr	r1, [pc, #208]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f6:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019fc:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f aea2 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3724      	adds	r7, #36	; 0x24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40013c00 	.word	0x40013c00

08001ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e11f      	b.n	8001d06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fbcc 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b18:	f002 f9b0 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8001b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a7b      	ldr	r2, [pc, #492]	; (8001d10 <HAL_I2C_Init+0x25c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d807      	bhi.n	8001b38 <HAL_I2C_Init+0x84>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4a7a      	ldr	r2, [pc, #488]	; (8001d14 <HAL_I2C_Init+0x260>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	bf94      	ite	ls
 8001b30:	2301      	movls	r3, #1
 8001b32:	2300      	movhi	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e006      	b.n	8001b46 <HAL_I2C_Init+0x92>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a77      	ldr	r2, [pc, #476]	; (8001d18 <HAL_I2C_Init+0x264>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bf94      	ite	ls
 8001b40:	2301      	movls	r3, #1
 8001b42:	2300      	movhi	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0db      	b.n	8001d06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a72      	ldr	r2, [pc, #456]	; (8001d1c <HAL_I2C_Init+0x268>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0c9b      	lsrs	r3, r3, #18
 8001b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a64      	ldr	r2, [pc, #400]	; (8001d10 <HAL_I2C_Init+0x25c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d802      	bhi.n	8001b88 <HAL_I2C_Init+0xd4>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3301      	adds	r3, #1
 8001b86:	e009      	b.n	8001b9c <HAL_I2C_Init+0xe8>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	4a63      	ldr	r2, [pc, #396]	; (8001d20 <HAL_I2C_Init+0x26c>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4956      	ldr	r1, [pc, #344]	; (8001d10 <HAL_I2C_Init+0x25c>)
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	d80d      	bhi.n	8001bd8 <HAL_I2C_Init+0x124>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e59      	subs	r1, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	bf38      	it	cc
 8001bd4:	2304      	movcc	r3, #4
 8001bd6:	e04f      	b.n	8001c78 <HAL_I2C_Init+0x1c4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d111      	bne.n	8001c04 <HAL_I2C_Init+0x150>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1e58      	subs	r0, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	440b      	add	r3, r1
 8001bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e012      	b.n	8001c2a <HAL_I2C_Init+0x176>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	0099      	lsls	r1, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Init+0x17e>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e022      	b.n	8001c78 <HAL_I2C_Init+0x1c4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10e      	bne.n	8001c58 <HAL_I2C_Init+0x1a4>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1e58      	subs	r0, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	440b      	add	r3, r1
 8001c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c56:	e00f      	b.n	8001c78 <HAL_I2C_Init+0x1c4>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1e58      	subs	r0, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	0099      	lsls	r1, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	6809      	ldr	r1, [r1, #0]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6911      	ldr	r1, [r2, #16]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68d2      	ldr	r2, [r2, #12]
 8001cb2:	4311      	orrs	r1, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	000186a0 	.word	0x000186a0
 8001d14:	001e847f 	.word	0x001e847f
 8001d18:	003d08ff 	.word	0x003d08ff
 8001d1c:	431bde83 	.word	0x431bde83
 8001d20:	10624dd3 	.word	0x10624dd3

08001d24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	817b      	strh	r3, [r7, #10]
 8001d36:	460b      	mov	r3, r1
 8001d38:	813b      	strh	r3, [r7, #8]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d3e:	f7ff fbf7 	bl	8001530 <HAL_GetTick>
 8001d42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	f040 80d9 	bne.w	8001f04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2319      	movs	r3, #25
 8001d58:	2201      	movs	r2, #1
 8001d5a:	496d      	ldr	r1, [pc, #436]	; (8001f10 <HAL_I2C_Mem_Write+0x1ec>)
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f96f 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e0cc      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_I2C_Mem_Write+0x56>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e0c5      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d007      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2221      	movs	r2, #33	; 0x21
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	; (8001f14 <HAL_I2C_Mem_Write+0x1f0>)
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001de2:	88f8      	ldrh	r0, [r7, #6]
 8001de4:	893a      	ldrh	r2, [r7, #8]
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4603      	mov	r3, r0
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f890 	bl	8001f18 <I2C_RequestMemoryWrite>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d052      	beq.n	8001ea4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e081      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f9f0 	bl	80021ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d107      	bne.n	8001e2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06b      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_I2C_Mem_Write+0x180>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d017      	beq.n	8001ea4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1aa      	bne.n	8001e02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f9dc 	bl	800226e <I2C_WaitOnBTFFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d107      	bne.n	8001ed4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e016      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	00100002 	.word	0x00100002
 8001f14:	ffff0000 	.word	0xffff0000

08001f18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	817b      	strh	r3, [r7, #10]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	813b      	strh	r3, [r7, #8]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f876 	bl	8002040 <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e05f      	b.n	8002034 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f74:	897b      	ldrh	r3, [r7, #10]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	6a3a      	ldr	r2, [r7, #32]
 8001f88:	492c      	ldr	r1, [pc, #176]	; (800203c <I2C_RequestMemoryWrite+0x124>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f8af 	bl	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e04c      	b.n	8002034 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb2:	6a39      	ldr	r1, [r7, #32]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f919 	bl	80021ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e02b      	b.n	8002034 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fe2:	893b      	ldrh	r3, [r7, #8]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	e021      	b.n	8002032 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fee:	893b      	ldrh	r3, [r7, #8]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	6a39      	ldr	r1, [r7, #32]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f8f3 	bl	80021ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00d      	beq.n	8002028 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2b04      	cmp	r3, #4
 8002012:	d107      	bne.n	8002024 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e005      	b.n	8002034 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002028:	893b      	ldrh	r3, [r7, #8]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	00010002 	.word	0x00010002

08002040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002050:	e025      	b.n	800209e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002058:	d021      	beq.n	800209e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7ff fa69 	bl	8001530 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d116      	bne.n	800209e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e023      	b.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10d      	bne.n	80020c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4013      	ands	r3, r2
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	e00c      	b.n	80020de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf0c      	ite	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	2300      	movne	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d0b6      	beq.n	8002052 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020fc:	e051      	b.n	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210c:	d123      	bne.n	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002126:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f043 0204 	orr.w	r2, r3, #4
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e046      	b.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800215c:	d021      	beq.n	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7ff f9e7 	bl	8001530 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d116      	bne.n	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e020      	b.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d10c      	bne.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4013      	ands	r3, r2
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf14      	ite	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	2300      	moveq	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	e00b      	b.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	43da      	mvns	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d18d      	bne.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f8:	e02d      	b.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f878 	bl	80022f0 <I2C_IsAcknowledgeFailed>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e02d      	b.n	8002266 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002210:	d021      	beq.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002212:	f7ff f98d 	bl	8001530 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	d302      	bcc.n	8002228 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d116      	bne.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e007      	b.n	8002266 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d1ca      	bne.n	80021fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800227a:	e02d      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f837 	bl	80022f0 <I2C_IsAcknowledgeFailed>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e02d      	b.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002292:	d021      	beq.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7ff f94c 	bl	8001530 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d1ca      	bne.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002306:	d11b      	bne.n	8002340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f043 0204 	orr.w	r2, r3, #4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800234e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002350:	b08f      	sub	sp, #60	; 0x3c
 8002352:	af0a      	add	r7, sp, #40	; 0x28
 8002354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e10f      	b.n	8002580 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f004 fe60 	bl	8007040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2203      	movs	r2, #3
 8002384:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fe95 	bl	80040ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	687e      	ldr	r6, [r7, #4]
 80023ac:	466d      	mov	r5, sp
 80023ae:	f106 0410 	add.w	r4, r6, #16
 80023b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023be:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c2:	1d33      	adds	r3, r6, #4
 80023c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f001 fd6c 	bl	8003ea4 <USB_CoreInit>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0d0      	b.n	8002580 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 fe83 	bl	80040f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e04a      	b.n	8002486 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	333d      	adds	r3, #61	; 0x3d
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	333c      	adds	r3, #60	; 0x3c
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	b298      	uxth	r0, r3
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3342      	adds	r3, #66	; 0x42
 800242c:	4602      	mov	r2, r0
 800242e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	333f      	adds	r3, #63	; 0x3f
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3344      	adds	r3, #68	; 0x44
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3348      	adds	r3, #72	; 0x48
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3350      	adds	r3, #80	; 0x50
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	3301      	adds	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d3af      	bcc.n	80023f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e044      	b.n	8002520 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3301      	adds	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3b5      	bcc.n	8002496 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	687e      	ldr	r6, [r7, #4]
 8002532:	466d      	mov	r5, sp
 8002534:	f106 0410 	add.w	r4, r6, #16
 8002538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002540:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002544:	e885 0003 	stmia.w	r5, {r0, r1}
 8002548:	1d33      	adds	r3, r6, #4
 800254a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800254c:	6838      	ldr	r0, [r7, #0]
 800254e:	f001 fdf9 	bl	8004144 <USB_DevInit>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e00d      	b.n	8002580 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f002 fe38 	bl	80051ee <USB_DevDisconnect>

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002588 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_PCD_Start+0x1c>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e020      	b.n	80025e6 <HAL_PCD_Start+0x5e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d109      	bne.n	80025c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d005      	beq.n	80025c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 fdf6 	bl	80051be <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fd68 	bl	80040ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ee:	b590      	push	{r4, r7, lr}
 80025f0:	b08d      	sub	sp, #52	; 0x34
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fe9d 	bl	8005344 <USB_GetMode>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f040 839d 	bne.w	8002d4c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fe01 	bl	800521e <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8393 	beq.w	8002d4a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fdf8 	bl	800521e <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	d107      	bne.n	8002648 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f002 0202 	and.w	r2, r2, #2
 8002646:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fde6 	bl	800521e <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	d161      	bne.n	8002720 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0210 	bic.w	r2, r2, #16
 800266a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	2b02      	cmp	r3, #2
 8002696:	d124      	bne.n	80026e2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d035      	beq.n	8002710 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6a38      	ldr	r0, [r7, #32]
 80026b8:	f002 fc5e 	bl	8004f78 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c8:	441a      	add	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026da:	441a      	add	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	619a      	str	r2, [r3, #24]
 80026e0:	e016      	b.n	8002710 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	0c5b      	lsrs	r3, r3, #17
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d110      	bne.n	8002710 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026f4:	2208      	movs	r2, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	6a38      	ldr	r0, [r7, #32]
 80026fa:	f002 fc3d 	bl	8004f78 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800270a:	441a      	add	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0210 	orr.w	r2, r2, #16
 800271e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f002 fd7a 	bl	800521e <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002730:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002734:	d16e      	bne.n	8002814 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f002 fd80 	bl	8005244 <USB_ReadDevAllOutEpInterrupt>
 8002744:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002746:	e062      	b.n	800280e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d057      	beq.n	8002802 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f002 fda5 	bl	80052ac <USB_ReadDevOutEPInterrupt>
 8002762:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277a:	461a      	mov	r2, r3
 800277c:	2301      	movs	r3, #1
 800277e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fdb0 	bl	80032e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279e:	461a      	mov	r2, r3
 80027a0:	2308      	movs	r3, #8
 80027a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 feaa 	bl	8003500 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c2:	461a      	mov	r2, r3
 80027c4:	2310      	movs	r3, #16
 80027c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	461a      	mov	r2, r3
 80027e0:	2320      	movs	r3, #32
 80027e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002800:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3301      	adds	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d199      	bne.n	8002748 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f002 fd00 	bl	800521e <USB_ReadInterrupts>
 800281e:	4603      	mov	r3, r0
 8002820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002828:	f040 80c0 	bne.w	80029ac <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fd21 	bl	8005278 <USB_ReadDevAllInEpInterrupt>
 8002836:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800283c:	e0b2      	b.n	80029a4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a7 	beq.w	8002998 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fd47 	bl	80052e8 <USB_ReadDevInEPInterrupt>
 800285a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d057      	beq.n	8002916 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	2201      	movs	r2, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	43db      	mvns	r3, r3
 8002880:	69f9      	ldr	r1, [r7, #28]
 8002882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002886:	4013      	ands	r3, r2
 8002888:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002896:	461a      	mov	r2, r3
 8002898:	2301      	movs	r3, #1
 800289a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d132      	bne.n	800290a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3348      	adds	r3, #72	; 0x48
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4403      	add	r3, r0
 80028c4:	3344      	adds	r3, #68	; 0x44
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4419      	add	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4403      	add	r3, r0
 80028d8:	3348      	adds	r3, #72	; 0x48
 80028da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d113      	bne.n	800290a <HAL_PCD_IRQHandler+0x31c>
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3350      	adds	r3, #80	; 0x50
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d108      	bne.n	800290a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002902:	461a      	mov	r2, r3
 8002904:	2101      	movs	r1, #1
 8002906:	f002 fd4f 	bl	80053a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f004 fc16 	bl	8007142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	461a      	mov	r2, r3
 800292e:	2308      	movs	r3, #8
 8002930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002948:	461a      	mov	r2, r3
 800294a:	2310      	movs	r3, #16
 800294c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002964:	461a      	mov	r2, r3
 8002966:	2340      	movs	r3, #64	; 0x40
 8002968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002980:	461a      	mov	r2, r3
 8002982:	2302      	movs	r3, #2
 8002984:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fc1b 	bl	80031ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3301      	adds	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f af49 	bne.w	800283e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f002 fc34 	bl	800521e <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029c0:	d122      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d108      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029e8:	2100      	movs	r1, #0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fe26 	bl	800363c <HAL_PCDEx_LPM_Callback>
 80029f0:	e002      	b.n	80029f8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f004 fc12 	bl	800721c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fc06 	bl	800521e <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1c:	d112      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f004 fbce 	bl	80071d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a42:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fbe8 	bl	800521e <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a58:	f040 80c7 	bne.w	8002bea <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2110      	movs	r1, #16
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fcc8 	bl	800440c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a80:	e056      	b.n	8002b30 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa6:	0151      	lsls	r1, r2, #5
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	440a      	add	r2, r1
 8002aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ab4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac6:	0151      	lsls	r1, r2, #5
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	440a      	add	r2, r1
 8002acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ad0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ad4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ae8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afa:	0151      	lsls	r1, r2, #5
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	440a      	add	r2, r1
 8002b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1a:	0151      	lsls	r1, r2, #5
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	440a      	add	r2, r1
 8002b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b28:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d3a3      	bcc.n	8002a82 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b48:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b66:	f043 030b 	orr.w	r3, r3, #11
 8002b6a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7c:	f043 030b 	orr.w	r3, r3, #11
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	e015      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b96:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b9a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002baa:	f043 030b 	orr.w	r3, r3, #11
 8002bae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bc2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f002 fbe7 	bl	80053a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fb15 	bl	800521e <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfe:	d124      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 fbab 	bl	8005360 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fc5d 	bl	80044ce <USB_GetDevSpeed>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681c      	ldr	r4, [r3, #0]
 8002c20:	f001 f920 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8002c24:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f001 f99a 	bl	8003f68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f004 faac 	bl	8007192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 fae5 	bl	800521e <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d10a      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f004 fa89 	bl	8007176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f002 0208 	and.w	r2, r2, #8
 8002c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 fad0 	bl	800521e <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c88:	d10f      	bne.n	8002caa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f004 fae1 	bl	800725c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 fab5 	bl	800521e <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f004 fab4 	bl	8007238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fa9a 	bl	800521e <USB_ReadInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d10a      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f004 fac2 	bl	8007280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fa84 	bl	800521e <USB_ReadInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d115      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f004 fab2 	bl	800729c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	e000      	b.n	8002d4c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002d4a:	bf00      	nop
    }
  }
}
 8002d4c:	3734      	adds	r7, #52	; 0x34
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd90      	pop	{r4, r7, pc}

08002d52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_PCD_SetAddress+0x1a>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e013      	b.n	8002d94 <HAL_PCD_SetAddress+0x42>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 f9f4 	bl	8005172 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	70fb      	strb	r3, [r7, #3]
 8002dae:	460b      	mov	r3, r1
 8002db0:	803b      	strh	r3, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da0f      	bge.n	8002de2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3338      	adds	r3, #56	; 0x38
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	705a      	strb	r2, [r3, #1]
 8002de0:	e00f      	b.n	8002e02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	3304      	adds	r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e0e:	883a      	ldrh	r2, [r7, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	78ba      	ldrb	r2, [r7, #2]
 8002e18:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e2c:	78bb      	ldrb	r3, [r7, #2]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d102      	bne.n	8002e38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_PCD_EP_Open+0xaa>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e00e      	b.n	8002e64 <HAL_PCD_EP_Open+0xc8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fb5f 	bl	8004518 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e62:	7afb      	ldrb	r3, [r7, #11]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0f      	bge.n	8002ea0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3338      	adds	r3, #56	; 0x38
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	705a      	strb	r2, [r3, #1]
 8002e9e:	e00f      	b.n	8002ec0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_PCD_EP_Close+0x6e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e00e      	b.n	8002ef8 <HAL_PCD_EP_Close+0x8c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 fb9d 	bl	8004628 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f42:	7afb      	ldrb	r3, [r7, #11]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	6979      	ldr	r1, [r7, #20]
 8002f74:	f001 fe78 	bl	8004c68 <USB_EP0StartXfer>
 8002f78:	e008      	b.n	8002f8c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	f001 fc2a 	bl	80047e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fb8:	681b      	ldr	r3, [r3, #0]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	3338      	adds	r3, #56	; 0x38
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2201      	movs	r2, #1
 8003004:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	b2da      	uxtb	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d102      	bne.n	8003020 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003020:	7afb      	ldrb	r3, [r7, #11]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	f001 fe16 	bl	8004c68 <USB_EP0StartXfer>
 800303c:	e008      	b.n	8003050 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	6979      	ldr	r1, [r7, #20]
 800304c:	f001 fbc8 	bl	80047e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d901      	bls.n	8003078 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e050      	b.n	800311a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0f      	bge.n	80030a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3338      	adds	r3, #56	; 0x38
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
 800309e:	e00d      	b.n	80030bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_PCD_EP_SetStall+0x82>
 80030d8:	2302      	movs	r3, #2
 80030da:	e01e      	b.n	800311a <HAL_PCD_EP_SetStall+0xc0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68f9      	ldr	r1, [r7, #12]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 ff6d 	bl	8004fca <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	b2d9      	uxtb	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800310a:	461a      	mov	r2, r3
 800310c:	f002 f94c 	bl	80053a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	d901      	bls.n	8003140 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e042      	b.n	80031c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003144:	2b00      	cmp	r3, #0
 8003146:	da0f      	bge.n	8003168 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	3338      	adds	r3, #56	; 0x38
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	3304      	adds	r3, #4
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
 8003166:	e00f      	b.n	8003188 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_PCD_EP_ClrStall+0x86>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e00e      	b.n	80031c6 <HAL_PCD_EP_ClrStall+0xa4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 ff75 	bl	80050a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b08a      	sub	sp, #40	; 0x28
 80031d2:	af02      	add	r7, sp, #8
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3338      	adds	r3, #56	; 0x38
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d901      	bls.n	8003206 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06c      	b.n	80032e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	429a      	cmp	r2, r3
 800321a:	d902      	bls.n	8003222 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3303      	adds	r3, #3
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800322a:	e02b      	b.n	8003284 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	429a      	cmp	r2, r3
 8003240:	d902      	bls.n	8003248 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	3303      	adds	r3, #3
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68d9      	ldr	r1, [r3, #12]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003260:	b2db      	uxtb	r3, r3
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	4603      	mov	r3, r0
 8003266:	6978      	ldr	r0, [r7, #20]
 8003268:	f001 fe51 	bl	8004f0e <USB_WritePacket>

    ep->xfer_buff  += len;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	441a      	add	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	441a      	add	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	b29b      	uxth	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	429a      	cmp	r2, r3
 8003298:	d809      	bhi.n	80032ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d203      	bcs.n	80032ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1be      	bne.n	800322c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d811      	bhi.n	80032de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2201      	movs	r2, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	6939      	ldr	r1, [r7, #16]
 80032d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032da:	4013      	ands	r3, r2
 80032dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	333c      	adds	r3, #60	; 0x3c
 8003300:	3304      	adds	r3, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	f040 80a0 	bne.w	8003460 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d015      	beq.n	8003356 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a72      	ldr	r2, [pc, #456]	; (80034f8 <PCD_EP_OutXfrComplete_int+0x210>)
 800332e:	4293      	cmp	r3, r2
 8003330:	f240 80dd 	bls.w	80034ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80d7 	beq.w	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	6093      	str	r3, [r2, #8]
 8003354:	e0cb      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	2320      	movs	r3, #32
 8003370:	6093      	str	r3, [r2, #8]
 8003372:	e0bc      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 80b7 	bne.w	80034ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a5d      	ldr	r2, [pc, #372]	; (80034f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d90f      	bls.n	80033a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	461a      	mov	r2, r3
 80033a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	e0a2      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	0159      	lsls	r1, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	440b      	add	r3, r1
 80033c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4403      	add	r3, r0
 80033de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4403      	add	r3, r0
 8003406:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4419      	add	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4403      	add	r3, r0
 800341c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003420:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d114      	bne.n	8003452 <PCD_EP_OutXfrComplete_int+0x16a>
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800344a:	461a      	mov	r2, r3
 800344c:	2101      	movs	r1, #1
 800344e:	f001 ffab 	bl	80053a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f003 fe57 	bl	800710c <HAL_PCD_DataOutStageCallback>
 800345e:	e046      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a26      	ldr	r2, [pc, #152]	; (80034fc <PCD_EP_OutXfrComplete_int+0x214>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d124      	bne.n	80034b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003484:	6093      	str	r3, [r2, #8]
 8003486:	e032      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349e:	461a      	mov	r2, r3
 80034a0:	2320      	movs	r3, #32
 80034a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f003 fe2e 	bl	800710c <HAL_PCD_DataOutStageCallback>
 80034b0:	e01d      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d114      	bne.n	80034e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d108      	bne.n	80034e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034da:	461a      	mov	r2, r3
 80034dc:	2100      	movs	r1, #0
 80034de:	f001 ff63 	bl	80053a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f003 fe0f 	bl	800710c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	4f54300a 	.word	0x4f54300a
 80034fc:	4f54310a 	.word	0x4f54310a

08003500 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	333c      	adds	r3, #60	; 0x3c
 8003518:	3304      	adds	r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <PCD_EP_OutSetupPacket_int+0x88>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d90e      	bls.n	8003554 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	461a      	mov	r2, r3
 800354e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003552:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f003 fdc7 	bl	80070e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <PCD_EP_OutSetupPacket_int+0x88>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d90c      	bls.n	800357c <PCD_EP_OutSetupPacket_int+0x7c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d108      	bne.n	800357c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003574:	461a      	mov	r2, r3
 8003576:	2101      	movs	r1, #1
 8003578:	f001 ff16 	bl	80053a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	4f54300a 	.word	0x4f54300a

0800358c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	70fb      	strb	r3, [r7, #3]
 8003598:	4613      	mov	r3, r2
 800359a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035aa:	883b      	ldrh	r3, [r7, #0]
 80035ac:	0419      	lsls	r1, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
 80035b8:	e028      	b.n	800360c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4413      	add	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e00d      	b.n	80035ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	3340      	adds	r3, #64	; 0x40
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	3301      	adds	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d3ec      	bcc.n	80035ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035f4:	883b      	ldrh	r3, [r7, #0]
 80035f6:	0418      	lsls	r0, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	3b01      	subs	r3, #1
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	4302      	orrs	r2, r0
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e25b      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d075      	beq.n	800375e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003672:	4ba3      	ldr	r3, [pc, #652]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b04      	cmp	r3, #4
 800367c:	d00c      	beq.n	8003698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367e:	4ba0      	ldr	r3, [pc, #640]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d112      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368a:	4b9d      	ldr	r3, [pc, #628]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003696:	d10b      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	4b99      	ldr	r3, [pc, #612]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d05b      	beq.n	800375c <HAL_RCC_OscConfig+0x108>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d157      	bne.n	800375c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e236      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_OscConfig+0x74>
 80036ba:	4b91      	ldr	r3, [pc, #580]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a90      	ldr	r2, [pc, #576]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e01d      	b.n	8003704 <HAL_RCC_OscConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x98>
 80036d2:	4b8b      	ldr	r3, [pc, #556]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a8a      	ldr	r2, [pc, #552]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b88      	ldr	r3, [pc, #544]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a87      	ldr	r2, [pc, #540]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0xb0>
 80036ec:	4b84      	ldr	r3, [pc, #528]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a83      	ldr	r2, [pc, #524]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b81      	ldr	r3, [pc, #516]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a80      	ldr	r2, [pc, #512]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fd ff10 	bl	8001530 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7fd ff0c 	bl	8001530 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1fb      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0xc0>
 8003732:	e014      	b.n	800375e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd fefc 	bl	8001530 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fef8 	bl	8001530 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1e7      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0xe8>
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d063      	beq.n	8003832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376a:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b62      	ldr	r3, [pc, #392]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d11c      	bne.n	80037bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003782:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	4b5c      	ldr	r3, [pc, #368]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_RCC_OscConfig+0x152>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e1bb      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	4b56      	ldr	r3, [pc, #344]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4952      	ldr	r1, [pc, #328]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	e03a      	b.n	8003832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c4:	4b4f      	ldr	r3, [pc, #316]	; (8003904 <HAL_RCC_OscConfig+0x2b0>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd feb1 	bl	8001530 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fd fead 	bl	8001530 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e19c      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	4b46      	ldr	r3, [pc, #280]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4940      	ldr	r1, [pc, #256]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]
 8003804:	e015      	b.n	8003832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_RCC_OscConfig+0x2b0>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fe90 	bl	8001530 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd fe8c 	bl	8001530 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e17b      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b36      	ldr	r3, [pc, #216]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d030      	beq.n	80038a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	4b30      	ldr	r3, [pc, #192]	; (8003908 <HAL_RCC_OscConfig+0x2b4>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fd fe70 	bl	8001530 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003854:	f7fd fe6c 	bl	8001530 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e15b      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x200>
 8003872:	e015      	b.n	80038a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCC_OscConfig+0x2b4>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7fd fe59 	bl	8001530 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003882:	f7fd fe55 	bl	8001530 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e144      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80a0 	beq.w	80039ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_OscConfig+0x2b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d121      	bne.n	800392e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_RCC_OscConfig+0x2b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a07      	ldr	r2, [pc, #28]	; (800390c <HAL_RCC_OscConfig+0x2b8>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7fd fe1b 	bl	8001530 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e011      	b.n	8003922 <HAL_RCC_OscConfig+0x2ce>
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	42470000 	.word	0x42470000
 8003908:	42470e80 	.word	0x42470e80
 800390c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003910:	f7fd fe0e 	bl	8001530 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0fd      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	4b81      	ldr	r3, [pc, #516]	; (8003b28 <HAL_RCC_OscConfig+0x4d4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x2f0>
 8003936:	4b7d      	ldr	r3, [pc, #500]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	4a7c      	ldr	r2, [pc, #496]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6713      	str	r3, [r2, #112]	; 0x70
 8003942:	e01c      	b.n	800397e <HAL_RCC_OscConfig+0x32a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b05      	cmp	r3, #5
 800394a:	d10c      	bne.n	8003966 <HAL_RCC_OscConfig+0x312>
 800394c:	4b77      	ldr	r3, [pc, #476]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4a76      	ldr	r2, [pc, #472]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	6713      	str	r3, [r2, #112]	; 0x70
 8003958:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a73      	ldr	r2, [pc, #460]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	e00b      	b.n	800397e <HAL_RCC_OscConfig+0x32a>
 8003966:	4b71      	ldr	r3, [pc, #452]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a70      	ldr	r2, [pc, #448]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	4b6e      	ldr	r3, [pc, #440]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a6d      	ldr	r2, [pc, #436]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d015      	beq.n	80039b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fd fdd3 	bl	8001530 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fd fdcf 	bl	8001530 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0bc      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ee      	beq.n	800398e <HAL_RCC_OscConfig+0x33a>
 80039b0:	e014      	b.n	80039dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b2:	f7fd fdbd 	bl	8001530 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fd fdb9 	bl	8001530 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e0a6      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ee      	bne.n	80039ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d105      	bne.n	80039ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e2:	4b52      	ldr	r3, [pc, #328]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	4a51      	ldr	r2, [pc, #324]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8092 	beq.w	8003b1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039f8:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d05c      	beq.n	8003abe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d141      	bne.n	8003a90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0c:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <HAL_RCC_OscConfig+0x4dc>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a12:	f7fd fd8d 	bl	8001530 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fd fd89 	bl	8001530 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e078      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	019b      	lsls	r3, r3, #6
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	3b01      	subs	r3, #1
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	4933      	ldr	r1, [pc, #204]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a62:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <HAL_RCC_OscConfig+0x4dc>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fd fd62 	bl	8001530 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fd5e 	bl	8001530 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e04d      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x41c>
 8003a8e:	e045      	b.n	8003b1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <HAL_RCC_OscConfig+0x4dc>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fd fd4b 	bl	8001530 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fd fd47 	bl	8001530 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e036      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f0      	bne.n	8003a9e <HAL_RCC_OscConfig+0x44a>
 8003abc:	e02e      	b.n	8003b1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e029      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_RCC_OscConfig+0x4d8>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d11c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d115      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003af2:	4013      	ands	r3, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470060 	.word	0x42470060

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cc      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b68      	ldr	r3, [pc, #416]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d90c      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b65      	ldr	r3, [pc, #404]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d044      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d119      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e067      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4934      	ldr	r1, [pc, #208]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c24:	f7fd fc84 	bl	8001530 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fd fc80 	bl	8001530 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e04f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d20c      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4601      	mov	r1, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	5cd3      	ldrb	r3, [r2, r3]
 8003cce:	fa21 f303 	lsr.w	r3, r1, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fbe4 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08009370 	.word	0x08009370
 8003cf8:	20000010 	.word	0x20000010
 8003cfc:	20000014 	.word	0x20000014

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d16:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d007      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x32>
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d008      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x38>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 808d 	bne.w	8003e46 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d2e:	60bb      	str	r3, [r7, #8]
       break;
 8003d30:	e08c      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d32:	4b4b      	ldr	r3, [pc, #300]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d34:	60bb      	str	r3, [r7, #8]
      break;
 8003d36:	e089      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d38:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d42:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d023      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4e:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	f04f 0400 	mov.w	r4, #0
 8003d58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	ea03 0501 	and.w	r5, r3, r1
 8003d64:	ea04 0602 	and.w	r6, r4, r2
 8003d68:	4a3d      	ldr	r2, [pc, #244]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d6a:	fb02 f106 	mul.w	r1, r2, r6
 8003d6e:	2200      	movs	r2, #0
 8003d70:	fb02 f205 	mul.w	r2, r2, r5
 8003d74:	440a      	add	r2, r1
 8003d76:	493a      	ldr	r1, [pc, #232]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d78:	fba5 0101 	umull	r0, r1, r5, r1
 8003d7c:	1853      	adds	r3, r2, r1
 8003d7e:	4619      	mov	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f04f 0400 	mov.w	r4, #0
 8003d86:	461a      	mov	r2, r3
 8003d88:	4623      	mov	r3, r4
 8003d8a:	f7fc fa25 	bl	80001d8 <__aeabi_uldivmod>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e049      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d96:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	f04f 0400 	mov.w	r4, #0
 8003da0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	ea03 0501 	and.w	r5, r3, r1
 8003dac:	ea04 0602 	and.w	r6, r4, r2
 8003db0:	4629      	mov	r1, r5
 8003db2:	4632      	mov	r2, r6
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	f04f 0400 	mov.w	r4, #0
 8003dbc:	0154      	lsls	r4, r2, #5
 8003dbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dc2:	014b      	lsls	r3, r1, #5
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	1b49      	subs	r1, r1, r5
 8003dca:	eb62 0206 	sbc.w	r2, r2, r6
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	f04f 0400 	mov.w	r4, #0
 8003dd6:	0194      	lsls	r4, r2, #6
 8003dd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ddc:	018b      	lsls	r3, r1, #6
 8003dde:	1a5b      	subs	r3, r3, r1
 8003de0:	eb64 0402 	sbc.w	r4, r4, r2
 8003de4:	f04f 0100 	mov.w	r1, #0
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	00e2      	lsls	r2, r4, #3
 8003dee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003df2:	00d9      	lsls	r1, r3, #3
 8003df4:	460b      	mov	r3, r1
 8003df6:	4614      	mov	r4, r2
 8003df8:	195b      	adds	r3, r3, r5
 8003dfa:	eb44 0406 	adc.w	r4, r4, r6
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	02a2      	lsls	r2, r4, #10
 8003e08:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e0c:	0299      	lsls	r1, r3, #10
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4614      	mov	r4, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	4621      	mov	r1, r4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f04f 0400 	mov.w	r4, #0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	f7fc f9da 	bl	80001d8 <__aeabi_uldivmod>
 8003e24:	4603      	mov	r3, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	0c1b      	lsrs	r3, r3, #16
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	3301      	adds	r3, #1
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	60bb      	str	r3, [r7, #8]
      break;
 8003e44:	e002      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e48:	60bb      	str	r3, [r7, #8]
      break;
 8003e4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	017d7840 	.word	0x017d7840

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000010 	.word	0x20000010

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e84:	4601      	mov	r1, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0a9b      	lsrs	r3, r3, #10
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08009380 	.word	0x08009380

08003ea4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	f107 001c 	add.w	r0, r7, #28
 8003eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d122      	bne.n	8003f02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 fab4 	bl	8005464 <USB_CoreReset>
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e01a      	b.n	8003f38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f001 faa8 	bl	8005464 <USB_CoreReset>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
 8003f2a:	e005      	b.n	8003f38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d10b      	bne.n	8003f56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f043 0206 	orr.w	r2, r3, #6
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f62:	b004      	add	sp, #16
 8003f64:	4770      	bx	lr
	...

08003f68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d165      	bne.n	8004048 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4a41      	ldr	r2, [pc, #260]	; (8004084 <USB_SetTurnaroundTime+0x11c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d906      	bls.n	8003f92 <USB_SetTurnaroundTime+0x2a>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4a40      	ldr	r2, [pc, #256]	; (8004088 <USB_SetTurnaroundTime+0x120>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d802      	bhi.n	8003f92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f8c:	230f      	movs	r3, #15
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e062      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <USB_SetTurnaroundTime+0x120>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d906      	bls.n	8003fa8 <USB_SetTurnaroundTime+0x40>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4a3b      	ldr	r2, [pc, #236]	; (800408c <USB_SetTurnaroundTime+0x124>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d802      	bhi.n	8003fa8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fa2:	230e      	movs	r3, #14
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e057      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a38      	ldr	r2, [pc, #224]	; (800408c <USB_SetTurnaroundTime+0x124>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d906      	bls.n	8003fbe <USB_SetTurnaroundTime+0x56>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4a37      	ldr	r2, [pc, #220]	; (8004090 <USB_SetTurnaroundTime+0x128>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d802      	bhi.n	8003fbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fb8:	230d      	movs	r3, #13
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e04c      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4a33      	ldr	r2, [pc, #204]	; (8004090 <USB_SetTurnaroundTime+0x128>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d906      	bls.n	8003fd4 <USB_SetTurnaroundTime+0x6c>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4a32      	ldr	r2, [pc, #200]	; (8004094 <USB_SetTurnaroundTime+0x12c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d802      	bhi.n	8003fd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003fce:	230c      	movs	r3, #12
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e041      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <USB_SetTurnaroundTime+0x12c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d906      	bls.n	8003fea <USB_SetTurnaroundTime+0x82>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4a2e      	ldr	r2, [pc, #184]	; (8004098 <USB_SetTurnaroundTime+0x130>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d802      	bhi.n	8003fea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003fe4:	230b      	movs	r3, #11
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e036      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <USB_SetTurnaroundTime+0x130>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d906      	bls.n	8004000 <USB_SetTurnaroundTime+0x98>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4a29      	ldr	r2, [pc, #164]	; (800409c <USB_SetTurnaroundTime+0x134>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d802      	bhi.n	8004000 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ffa:	230a      	movs	r3, #10
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e02b      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a26      	ldr	r2, [pc, #152]	; (800409c <USB_SetTurnaroundTime+0x134>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d906      	bls.n	8004016 <USB_SetTurnaroundTime+0xae>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <USB_SetTurnaroundTime+0x138>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d802      	bhi.n	8004016 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004010:	2309      	movs	r3, #9
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e020      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <USB_SetTurnaroundTime+0x138>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d906      	bls.n	800402c <USB_SetTurnaroundTime+0xc4>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <USB_SetTurnaroundTime+0x13c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d802      	bhi.n	800402c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004026:	2308      	movs	r3, #8
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e015      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <USB_SetTurnaroundTime+0x13c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d906      	bls.n	8004042 <USB_SetTurnaroundTime+0xda>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <USB_SetTurnaroundTime+0x140>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d802      	bhi.n	8004042 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800403c:	2307      	movs	r3, #7
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e00a      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004042:	2306      	movs	r3, #6
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e007      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800404e:	2309      	movs	r3, #9
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e001      	b.n	8004058 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004054:	2309      	movs	r3, #9
 8004056:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	029b      	lsls	r3, r3, #10
 800406c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	00d8acbf 	.word	0x00d8acbf
 8004088:	00e4e1bf 	.word	0x00e4e1bf
 800408c:	00f423ff 	.word	0x00f423ff
 8004090:	0106737f 	.word	0x0106737f
 8004094:	011a499f 	.word	0x011a499f
 8004098:	01312cff 	.word	0x01312cff
 800409c:	014ca43f 	.word	0x014ca43f
 80040a0:	016e35ff 	.word	0x016e35ff
 80040a4:	01a6ab1f 	.word	0x01a6ab1f
 80040a8:	01e847ff 	.word	0x01e847ff

080040ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 0201 	bic.w	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d106      	bne.n	800411c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	e00b      	b.n	8004134 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	e001      	b.n	8004134 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e003      	b.n	800413c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004134:	2032      	movs	r0, #50	; 0x32
 8004136:	f7fd fa07 	bl	8001548 <HAL_Delay>

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004144:	b084      	sub	sp, #16
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	e009      	b.n	8004178 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3340      	adds	r3, #64	; 0x40
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	2200      	movs	r2, #0
 8004170:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	3301      	adds	r3, #1
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0e      	cmp	r3, #14
 800417c:	d9f2      	bls.n	8004164 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800417e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11c      	bne.n	80041be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
 80041bc:	e00b      	b.n	80041d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041dc:	461a      	mov	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	4619      	mov	r1, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f0:	461a      	mov	r2, r3
 80041f2:	680b      	ldr	r3, [r1, #0]
 80041f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10c      	bne.n	8004216 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004202:	2100      	movs	r1, #0
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f949 	bl	800449c <USB_SetDevSpeed>
 800420a:	e008      	b.n	800421e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800420c:	2101      	movs	r1, #1
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f944 	bl	800449c <USB_SetDevSpeed>
 8004214:	e003      	b.n	800421e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004216:	2103      	movs	r1, #3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f93f 	bl	800449c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800421e:	2110      	movs	r1, #16
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f8f3 	bl	800440c <USB_FlushTxFifo>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f911 	bl	8004458 <USB_FlushRxFifo>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	461a      	mov	r2, r3
 8004254:	2300      	movs	r3, #0
 8004256:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	461a      	mov	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	e043      	b.n	80042f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800427c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004280:	d118      	bne.n	80042b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004294:	461a      	mov	r2, r3
 8004296:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	e013      	b.n	80042c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	461a      	mov	r2, r3
 80042ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e008      	b.n	80042c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	461a      	mov	r2, r3
 80042c2:	2300      	movs	r3, #0
 80042c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	461a      	mov	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e4:	461a      	mov	r2, r3
 80042e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	3301      	adds	r3, #1
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d3b7      	bcc.n	800426a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e043      	b.n	8004388 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004316:	d118      	bne.n	800434a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	461a      	mov	r2, r3
 800432c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e013      	b.n	800435c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	e008      	b.n	800435c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	2300      	movs	r3, #0
 800435a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	461a      	mov	r2, r3
 800436a:	2300      	movs	r3, #0
 800436c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	461a      	mov	r2, r3
 800437c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004380:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3301      	adds	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	429a      	cmp	r2, r3
 800438e:	d3b7      	bcc.n	8004300 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f043 0210 	orr.w	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <USB_DevInit+0x2c4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f043 0208 	orr.w	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d107      	bne.n	80043f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043f0:	f043 0304 	orr.w	r3, r3, #4
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004404:	b004      	add	sp, #16
 8004406:	4770      	bx	lr
 8004408:	803c3800 	.word	0x803c3800

0800440c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	019b      	lsls	r3, r3, #6
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <USB_FlushTxFifo+0x48>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e006      	b.n	8004446 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b20      	cmp	r3, #32
 8004442:	d0f0      	beq.n	8004426 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	00030d40 	.word	0x00030d40

08004458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2210      	movs	r2, #16
 8004468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3301      	adds	r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <USB_FlushRxFifo+0x40>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e006      	b.n	800448a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d0f0      	beq.n	800446a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	00030d40 	.word	0x00030d40

0800449c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b087      	sub	sp, #28
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0306 	and.w	r3, r3, #6
 80044e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044ee:	2300      	movs	r3, #0
 80044f0:	75fb      	strb	r3, [r7, #23]
 80044f2:	e00a      	b.n	800450a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d002      	beq.n	8004500 <USB_GetDevSpeed+0x32>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b06      	cmp	r3, #6
 80044fe:	d102      	bne.n	8004506 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004500:	2302      	movs	r3, #2
 8004502:	75fb      	strb	r3, [r7, #23]
 8004504:	e001      	b.n	800450a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004506:	230f      	movs	r3, #15
 8004508:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d13a      	bne.n	80045aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	2101      	movs	r1, #1
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	b29b      	uxth	r3, r3
 800454c:	68f9      	ldr	r1, [r7, #12]
 800454e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004552:	4313      	orrs	r3, r2
 8004554:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d155      	bne.n	8004618 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	78db      	ldrb	r3, [r3, #3]
 8004586:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004588:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	059b      	lsls	r3, r3, #22
 800458e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004590:	4313      	orrs	r3, r2
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	440a      	add	r2, r1
 800459a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	e036      	b.n	8004618 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	2101      	movs	r1, #1
 80045bc:	fa01 f303 	lsl.w	r3, r1, r3
 80045c0:	041b      	lsls	r3, r3, #16
 80045c2:	68f9      	ldr	r1, [r7, #12]
 80045c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d11a      	bne.n	8004618 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	78db      	ldrb	r3, [r3, #3]
 80045fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045fe:	430b      	orrs	r3, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004616:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d161      	bne.n	8004708 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800465a:	d11f      	bne.n	800469c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800467a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800469a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046bc:	4013      	ands	r3, r2
 80046be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	2101      	movs	r1, #1
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e0:	4013      	ands	r3, r2
 80046e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	0159      	lsls	r1, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	440b      	add	r3, r1
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	4619      	mov	r1, r3
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <USB_DeactivateEndpoint+0x1b0>)
 8004702:	4013      	ands	r3, r2
 8004704:	600b      	str	r3, [r1, #0]
 8004706:	e060      	b.n	80047ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800471a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800471e:	d11f      	bne.n	8004760 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800473e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800475e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	43db      	mvns	r3, r3
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004780:	4013      	ands	r3, r2
 8004782:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	43db      	mvns	r3, r3
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a4:	4013      	ands	r3, r2
 80047a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	0159      	lsls	r1, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	440b      	add	r3, r1
 80047be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c2:	4619      	mov	r1, r3
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <USB_DeactivateEndpoint+0x1b4>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	ec337800 	.word	0xec337800
 80047dc:	eff37800 	.word	0xeff37800

080047e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	f040 815c 	bne.w	8004aba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d132      	bne.n	8004870 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	440a      	add	r2, r1
 8004820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004824:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004828:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800482c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	440a      	add	r2, r1
 8004844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800484c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	440a      	add	r2, r1
 8004864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004868:	0cdb      	lsrs	r3, r3, #19
 800486a:	04db      	lsls	r3, r3, #19
 800486c:	6113      	str	r3, [r2, #16]
 800486e:	e074      	b.n	800495a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488a:	0cdb      	lsrs	r3, r3, #19
 800488c:	04db      	lsls	r3, r3, #19
 800488e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6959      	ldr	r1, [r3, #20]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	440b      	add	r3, r1
 80048cc:	1e59      	subs	r1, r3, #1
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d6:	04d9      	lsls	r1, r3, #19
 80048d8:	4b9d      	ldr	r3, [pc, #628]	; (8004b50 <USB_EPStartXfer+0x370>)
 80048da:	400b      	ands	r3, r1
 80048dc:	69b9      	ldr	r1, [r7, #24]
 80048de:	0148      	lsls	r0, r1, #5
 80048e0:	69f9      	ldr	r1, [r7, #28]
 80048e2:	4401      	add	r1, r0
 80048e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048e8:	4313      	orrs	r3, r2
 80048ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004902:	69b9      	ldr	r1, [r7, #24]
 8004904:	0148      	lsls	r0, r1, #5
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	4401      	add	r1, r0
 800490a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800490e:	4313      	orrs	r3, r2
 8004910:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	78db      	ldrb	r3, [r3, #3]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d11f      	bne.n	800495a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004934:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004938:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	0151      	lsls	r1, r2, #5
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	440a      	add	r2, r1
 8004950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004958:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d14b      	bne.n	80049f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d009      	beq.n	800497c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	461a      	mov	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	78db      	ldrb	r3, [r3, #3]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d128      	bne.n	80049d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d110      	bne.n	80049b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e00f      	b.n	80049d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e12f      	b.n	8004c58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	78db      	ldrb	r3, [r3, #3]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d015      	beq.n	8004a4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8117 	beq.w	8004c58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a40:	69f9      	ldr	r1, [r7, #28]
 8004a42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a46:	4313      	orrs	r3, r2
 8004a48:	634b      	str	r3, [r1, #52]	; 0x34
 8004a4a:	e105      	b.n	8004c58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d110      	bne.n	8004a7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e00f      	b.n	8004a9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68d9      	ldr	r1, [r3, #12]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	b298      	uxth	r0, r3
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fa2b 	bl	8004f0e <USB_WritePacket>
 8004ab8:	e0ce      	b.n	8004c58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad4:	0cdb      	lsrs	r3, r3, #19
 8004ad6:	04db      	lsls	r3, r3, #19
 8004ad8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004af8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004afc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d126      	bne.n	8004b54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	0148      	lsls	r0, r1, #5
 8004b20:	69f9      	ldr	r1, [r7, #28]
 8004b22:	4401      	add	r1, r0
 8004b24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b4a:	6113      	str	r3, [r2, #16]
 8004b4c:	e036      	b.n	8004bbc <USB_EPStartXfer+0x3dc>
 8004b4e:	bf00      	nop
 8004b50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	1e5a      	subs	r2, r3, #1
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	8afb      	ldrh	r3, [r7, #22]
 8004b7a:	04d9      	lsls	r1, r3, #19
 8004b7c:	4b39      	ldr	r3, [pc, #228]	; (8004c64 <USB_EPStartXfer+0x484>)
 8004b7e:	400b      	ands	r3, r1
 8004b80:	69b9      	ldr	r1, [r7, #24]
 8004b82:	0148      	lsls	r0, r1, #5
 8004b84:	69f9      	ldr	r1, [r7, #28]
 8004b86:	4401      	add	r1, r0
 8004b88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	8af9      	ldrh	r1, [r7, #22]
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bac:	69b9      	ldr	r1, [r7, #24]
 8004bae:	0148      	lsls	r0, r1, #5
 8004bb0:	69f9      	ldr	r1, [r7, #28]
 8004bb2:	4401      	add	r1, r0
 8004bb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d10d      	bne.n	8004bde <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	68d9      	ldr	r1, [r3, #12]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	460a      	mov	r2, r1
 8004bdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	78db      	ldrb	r3, [r3, #3]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d128      	bne.n	8004c38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d110      	bne.n	8004c18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e00f      	b.n	8004c38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	1ff80000 	.word	0x1ff80000

08004c68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	f040 80cd 	bne.w	8004e24 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d132      	bne.n	8004cf8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf0:	0cdb      	lsrs	r3, r3, #19
 8004cf2:	04db      	lsls	r3, r3, #19
 8004cf4:	6113      	str	r3, [r2, #16]
 8004cf6:	e04e      	b.n	8004d96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d12:	0cdb      	lsrs	r3, r3, #19
 8004d14:	04db      	lsls	r3, r3, #19
 8004d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d903      	bls.n	8004d50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d86:	6939      	ldr	r1, [r7, #16]
 8004d88:	0148      	lsls	r0, r1, #5
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	4401      	add	r1, r0
 8004d8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d92:	4313      	orrs	r3, r2
 8004d94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d11e      	bne.n	8004dda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	461a      	mov	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	e092      	b.n	8004f00 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004df8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d07e      	beq.n	8004f00 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	2101      	movs	r1, #1
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	6979      	ldr	r1, [r7, #20]
 8004e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	634b      	str	r3, [r1, #52]	; 0x34
 8004e22:	e06d      	b.n	8004f00 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3e:	0cdb      	lsrs	r3, r3, #19
 8004e40:	04db      	lsls	r3, r3, #19
 8004e42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e66:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eae:	6939      	ldr	r1, [r7, #16]
 8004eb0:	0148      	lsls	r0, r1, #5
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	4401      	add	r1, r0
 8004eb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d10d      	bne.n	8004ee0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	68d9      	ldr	r1, [r3, #12]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	460a      	mov	r2, r1
 8004ede:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004efe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b089      	sub	sp, #36	; 0x24
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	71fb      	strb	r3, [r7, #7]
 8004f20:	4613      	mov	r3, r2
 8004f22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004f2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11a      	bne.n	8004f6a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f34:	88bb      	ldrh	r3, [r7, #4]
 8004f36:	3303      	adds	r3, #3
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e00f      	b.n	8004f62 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	031a      	lsls	r2, r3, #12
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4e:	461a      	mov	r2, r3
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3eb      	bcc.n	8004f42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3724      	adds	r7, #36	; 0x24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b089      	sub	sp, #36	; 0x24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	3303      	adds	r3, #3
 8004f92:	089b      	lsrs	r3, r3, #2
 8004f94:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e00b      	b.n	8004fb4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	3304      	adds	r3, #4
 8004fac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3ef      	bcc.n	8004f9c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004fbc:	69fb      	ldr	r3, [r7, #28]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	; 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d12c      	bne.n	8005040 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db12      	blt.n	800501e <USB_EPSetStall+0x54>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00f      	beq.n	800501e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005018:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800501c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	e02b      	b.n	8005098 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	db12      	blt.n	8005078 <USB_EPSetStall+0xae>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00f      	beq.n	8005078 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005076:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d128      	bne.n	8005114 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	78db      	ldrb	r3, [r3, #3]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d003      	beq.n	80050f2 <USB_EPClearStall+0x4c>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	78db      	ldrb	r3, [r3, #3]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d138      	bne.n	8005164 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	0151      	lsls	r1, r2, #5
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	440a      	add	r2, r1
 8005108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e027      	b.n	8005164 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005132:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	78db      	ldrb	r3, [r3, #3]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d003      	beq.n	8005144 <USB_EPClearStall+0x9e>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	78db      	ldrb	r3, [r3, #3]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d10f      	bne.n	8005164 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005162:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005190:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005194:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d8:	f023 0302 	bic.w	r3, r3, #2
 80051dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80051de:	2003      	movs	r0, #3
 80051e0:	f7fc f9b2 	bl	8001548 <HAL_Delay>

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800520e:	2003      	movs	r0, #3
 8005210:	f7fc f99a 	bl	8001548 <HAL_Delay>

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4013      	ands	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	0c1b      	lsrs	r3, r3, #16
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	b29b      	uxth	r3, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4013      	ands	r3, r2
 80052d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052da:	68bb      	ldr	r3, [r7, #8]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	01db      	lsls	r3, r3, #7
 800531a:	b2db      	uxtb	r3, r3
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4013      	ands	r3, r2
 8005334:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005336:	68bb      	ldr	r3, [r7, #8]
}
 8005338:	4618      	mov	r0, r3
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f003 0301 	and.w	r3, r3, #1
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800537e:	f023 0307 	bic.w	r3, r3, #7
 8005382:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005396:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	460b      	mov	r3, r1
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	333c      	adds	r3, #60	; 0x3c
 80053be:	3304      	adds	r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4a26      	ldr	r2, [pc, #152]	; (8005460 <USB_EP0_OutStart+0xb8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d90a      	bls.n	80053e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053dc:	d101      	bne.n	80053e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e037      	b.n	8005452 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	461a      	mov	r2, r3
 80053ea:	2300      	movs	r3, #0
 80053ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005410:	f043 0318 	orr.w	r3, r3, #24
 8005414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005424:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005428:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800542a:	7afb      	ldrb	r3, [r7, #11]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10f      	bne.n	8005450 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800544e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	4f54300a 	.word	0x4f54300a

08005464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <USB_CoreReset+0x64>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e01b      	b.n	80054ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	daf2      	bge.n	8005470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f043 0201 	orr.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <USB_CoreReset+0x64>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d901      	bls.n	80054ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e006      	b.n	80054ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d0f0      	beq.n	800549a <USB_CoreReset+0x36>

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	00030d40 	.word	0x00030d40

080054cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054dc:	f002 f8cc 	bl	8007678 <malloc>
 80054e0:	4603      	mov	r3, r0
 80054e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80054f2:	2302      	movs	r3, #2
 80054f4:	e066      	b.n	80055c4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	7c1b      	ldrb	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d119      	bne.n	800553a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800550a:	2202      	movs	r2, #2
 800550c:	2181      	movs	r1, #129	; 0x81
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 ff39 	bl	8007386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800551a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800551e:	2202      	movs	r2, #2
 8005520:	2101      	movs	r1, #1
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f001 ff2f 	bl	8007386 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2210      	movs	r2, #16
 8005534:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005538:	e016      	b.n	8005568 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800553a:	2340      	movs	r3, #64	; 0x40
 800553c:	2202      	movs	r2, #2
 800553e:	2181      	movs	r1, #129	; 0x81
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 ff20 	bl	8007386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800554c:	2340      	movs	r3, #64	; 0x40
 800554e:	2202      	movs	r2, #2
 8005550:	2101      	movs	r1, #1
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 ff17 	bl	8007386 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2210      	movs	r2, #16
 8005564:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005568:	2308      	movs	r3, #8
 800556a:	2203      	movs	r2, #3
 800556c:	2182      	movs	r1, #130	; 0x82
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 ff09 	bl	8007386 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7c1b      	ldrb	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a8:	2101      	movs	r1, #1
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 ffda 	bl	8007564 <USBD_LL_PrepareReceive>
 80055b0:	e007      	b.n	80055c2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	2101      	movs	r1, #1
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 ffd1 	bl	8007564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80055dc:	2181      	movs	r1, #129	; 0x81
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 fef7 	bl	80073d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055ea:	2101      	movs	r1, #1
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fef0 	bl	80073d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055fa:	2182      	movs	r1, #130	; 0x82
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f001 fee8 	bl	80073d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800562c:	4618      	mov	r0, r3
 800562e:	f002 f82b 	bl	8007688 <free>
    pdev->pClassData = NULL;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005654:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800566a:	2b00      	cmp	r3, #0
 800566c:	d03a      	beq.n	80056e4 <USBD_CDC_Setup+0xa0>
 800566e:	2b20      	cmp	r3, #32
 8005670:	f040 8097 	bne.w	80057a2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	88db      	ldrh	r3, [r3, #6]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d029      	beq.n	80056d0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	b25b      	sxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	da11      	bge.n	80056aa <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005692:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	88d2      	ldrh	r2, [r2, #6]
 8005698:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800569a:	6939      	ldr	r1, [r7, #16]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	88db      	ldrh	r3, [r3, #6]
 80056a0:	461a      	mov	r2, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f001 fa6d 	bl	8006b82 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80056a8:	e082      	b.n	80057b0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	785a      	ldrb	r2, [r3, #1]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	88db      	ldrh	r3, [r3, #6]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80056c0:	6939      	ldr	r1, [r7, #16]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	88db      	ldrh	r3, [r3, #6]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 fa86 	bl	8006bda <USBD_CtlPrepareRx>
    break;
 80056ce:	e06f      	b.n	80057b0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	7850      	ldrb	r0, [r2, #1]
 80056dc:	2200      	movs	r2, #0
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	4798      	blx	r3
    break;
 80056e2:	e065      	b.n	80057b0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b0b      	cmp	r3, #11
 80056ea:	d84f      	bhi.n	800578c <USBD_CDC_Setup+0x148>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <USBD_CDC_Setup+0xb0>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005725 	.word	0x08005725
 80056f8:	0800579b 	.word	0x0800579b
 80056fc:	0800578d 	.word	0x0800578d
 8005700:	0800578d 	.word	0x0800578d
 8005704:	0800578d 	.word	0x0800578d
 8005708:	0800578d 	.word	0x0800578d
 800570c:	0800578d 	.word	0x0800578d
 8005710:	0800578d 	.word	0x0800578d
 8005714:	0800578d 	.word	0x0800578d
 8005718:	0800578d 	.word	0x0800578d
 800571c:	0800574d 	.word	0x0800574d
 8005720:	08005775 	.word	0x08005775
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800572a:	2b03      	cmp	r3, #3
 800572c:	d107      	bne.n	800573e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800572e:	f107 030c 	add.w	r3, r7, #12
 8005732:	2202      	movs	r2, #2
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 fa23 	bl	8006b82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800573c:	e030      	b.n	80057a0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 f9ad 	bl	8006aa0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005746:	2303      	movs	r3, #3
 8005748:	75fb      	strb	r3, [r7, #23]
      break;
 800574a:	e029      	b.n	80057a0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005752:	2b03      	cmp	r3, #3
 8005754:	d107      	bne.n	8005766 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005756:	f107 030f 	add.w	r3, r7, #15
 800575a:	2201      	movs	r2, #1
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fa0f 	bl	8006b82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005764:	e01c      	b.n	80057a0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 f999 	bl	8006aa0 <USBD_CtlError>
        ret = USBD_FAIL;
 800576e:	2303      	movs	r3, #3
 8005770:	75fb      	strb	r3, [r7, #23]
      break;
 8005772:	e015      	b.n	80057a0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577a:	2b03      	cmp	r3, #3
 800577c:	d00f      	beq.n	800579e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 f98d 	bl	8006aa0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005786:	2303      	movs	r3, #3
 8005788:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800578a:	e008      	b.n	800579e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 f986 	bl	8006aa0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005794:	2303      	movs	r3, #3
 8005796:	75fb      	strb	r3, [r7, #23]
      break;
 8005798:	e002      	b.n	80057a0 <USBD_CDC_Setup+0x15c>
      break;
 800579a:	bf00      	nop
 800579c:	e008      	b.n	80057b0 <USBD_CDC_Setup+0x16c>
      break;
 800579e:	bf00      	nop
    }
    break;
 80057a0:	e006      	b.n	80057b0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 f97b 	bl	8006aa0 <USBD_CtlError>
    ret = USBD_FAIL;
 80057aa:	2303      	movs	r3, #3
 80057ac:	75fb      	strb	r3, [r7, #23]
    break;
 80057ae:	bf00      	nop
  }

  return (uint8_t)ret;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop

080057bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80057ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057da:	2303      	movs	r3, #3
 80057dc:	e049      	b.n	8005872 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	3318      	adds	r3, #24
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d029      	beq.n	8005850 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	3318      	adds	r3, #24
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	78f9      	ldrb	r1, [r7, #3]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	460b      	mov	r3, r1
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	1a5b      	subs	r3, r3, r1
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4403      	add	r3, r0
 800581c:	3344      	adds	r3, #68	; 0x44
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	fbb2 f1f3 	udiv	r1, r2, r3
 8005824:	fb03 f301 	mul.w	r3, r3, r1
 8005828:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800582a:	2b00      	cmp	r3, #0
 800582c:	d110      	bne.n	8005850 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	3318      	adds	r3, #24
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005842:	78f9      	ldrb	r1, [r7, #3]
 8005844:	2300      	movs	r3, #0
 8005846:	2200      	movs	r2, #0
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f001 fe6a 	bl	8007522 <USBD_LL_Transmit>
 800584e:	e00f      	b.n	8005870 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800588c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005898:	2303      	movs	r3, #3
 800589a:	e015      	b.n	80058c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 fe80 	bl	80075a6 <USBD_LL_GetRxDataSize>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058c2:	4611      	mov	r1, r2
 80058c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058de:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d015      	beq.n	8005916 <USBD_CDC_EP0_RxReady+0x46>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058f0:	2bff      	cmp	r3, #255	; 0xff
 80058f2:	d010      	beq.n	8005916 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005902:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800590a:	b292      	uxth	r2, r2
 800590c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	22ff      	movs	r2, #255	; 0xff
 8005912:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2243      	movs	r2, #67	; 0x43
 800592c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800592e:	4b03      	ldr	r3, [pc, #12]	; (800593c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	200000a4 	.word	0x200000a4

08005940 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2243      	movs	r2, #67	; 0x43
 800594c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800594e:	4b03      	ldr	r3, [pc, #12]	; (800595c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	20000060 	.word	0x20000060

08005960 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2243      	movs	r2, #67	; 0x43
 800596c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800596e:	4b03      	ldr	r3, [pc, #12]	; (800597c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	200000e8 	.word	0x200000e8

08005980 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	220a      	movs	r2, #10
 800598c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800598e:	4b03      	ldr	r3, [pc, #12]	; (800599c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	2000001c 	.word	0x2000001c

080059a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e004      	b.n	80059be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b087      	sub	sp, #28
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a0c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e016      	b.n	8005a70 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7c1b      	ldrb	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a54:	2101      	movs	r1, #1
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fd84 	bl	8007564 <USBD_LL_PrepareReceive>
 8005a5c:	e007      	b.n	8005a6e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	2101      	movs	r1, #1
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 fd7b 	bl	8007564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e025      	b.n	8005adc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	79fa      	ldrb	r2, [r7, #7]
 8005ace:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f001 fbf1 	bl	80072b8 <USBD_LL_Init>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e010      	b.n	8005b1e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f107 020e 	add.w	r2, r7, #14
 8005b10:	4610      	mov	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	4602      	mov	r2, r0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fc0e 	bl	8007350 <USBD_LL_Start>
 8005b34:	4603      	mov	r3, r0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b60:	2303      	movs	r3, #3
 8005b62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	4611      	mov	r1, r2
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
 8005b7e:	4603      	mov	r3, r0
 8005b80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	78fa      	ldrb	r2, [r7, #3]
 8005bac:	4611      	mov	r1, r2
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
  }

  return USBD_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ff2c 	bl	8006a2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005be2:	461a      	mov	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d00e      	beq.n	8005c16 <USBD_LL_SetupStage+0x5a>
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d302      	bcc.n	8005c02 <USBD_LL_SetupStage+0x46>
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d014      	beq.n	8005c2a <USBD_LL_SetupStage+0x6e>
 8005c00:	e01d      	b.n	8005c3e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa18 	bl	8006040 <USBD_StdDevReq>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]
      break;
 8005c14:	e020      	b.n	8005c58 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fa7c 	bl	800611c <USBD_StdItfReq>
 8005c24:	4603      	mov	r3, r0
 8005c26:	73fb      	strb	r3, [r7, #15]
      break;
 8005c28:	e016      	b.n	8005c58 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fab8 	bl	80061a8 <USBD_StdEPReq>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3c:	e00c      	b.n	8005c58 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 fbdf 	bl	8007410 <USBD_LL_StallEP>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
      break;
 8005c56:	bf00      	nop
  }

  return ret;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d137      	bne.n	8005ce6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d14a      	bne.n	8005d1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d913      	bls.n	8005cbc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	1ad2      	subs	r2, r2, r3
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	4293      	cmp	r3, r2
 8005cac:	bf28      	it	cs
 8005cae:	4613      	movcs	r3, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 ffad 	bl	8006c14 <USBD_CtlContinueRx>
 8005cba:	e030      	b.n	8005d1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d105      	bne.n	8005cde <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 ffa9 	bl	8006c36 <USBD_CtlSendStatus>
 8005ce4:	e01b      	b.n	8005d1e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d013      	beq.n	8005d1a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d10e      	bne.n	8005d1a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	7afa      	ldrb	r2, [r7, #11]
 8005d06:	4611      	mov	r1, r2
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	4798      	blx	r3
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	e002      	b.n	8005d20 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e000      	b.n	8005d20 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	460b      	mov	r3, r1
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d36:	7afb      	ldrb	r3, [r7, #11]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d16a      	bne.n	8005e12 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3314      	adds	r3, #20
 8005d40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d155      	bne.n	8005df8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d914      	bls.n	8005d82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	1ad2      	subs	r2, r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 ff22 	bl	8006bb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d74:	2300      	movs	r3, #0
 8005d76:	2200      	movs	r2, #0
 8005d78:	2100      	movs	r1, #0
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f001 fbf2 	bl	8007564 <USBD_LL_PrepareReceive>
 8005d80:	e03a      	b.n	8005df8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d11c      	bne.n	8005dc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d316      	bcc.n	8005dc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d20f      	bcs.n	8005dc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005da8:	2200      	movs	r2, #0
 8005daa:	2100      	movs	r1, #0
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 ff03 	bl	8006bb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f001 fbcf 	bl	8007564 <USBD_LL_PrepareReceive>
 8005dc6:	e017      	b.n	8005df8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d105      	bne.n	8005dea <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dea:	2180      	movs	r1, #128	; 0x80
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f001 fb0f 	bl	8007410 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 ff32 	bl	8006c5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d123      	bne.n	8005e4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f7ff fe9b 	bl	8005b3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e10:	e01b      	b.n	8005e4a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d013      	beq.n	8005e46 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d10e      	bne.n	8005e46 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	7afa      	ldrb	r2, [r7, #11]
 8005e32:	4611      	mov	r1, r2
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	4798      	blx	r3
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	e002      	b.n	8005e4c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e000      	b.n	8005e4c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6852      	ldr	r2, [r2, #4]
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	4611      	mov	r1, r2
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fa71 	bl	8007386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2180      	movs	r1, #128	; 0x80
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fa63 	bl	8007386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d105      	bne.n	8005f3e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d10b      	bne.n	8005f76 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d009      	beq.n	8005ff8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6852      	ldr	r2, [r2, #4]
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
  }

  return USBD_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006002:	b480      	push	{r7}
 8006004:	b087      	sub	sp, #28
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	3301      	adds	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006020:	8a3b      	ldrh	r3, [r7, #16]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	b21a      	sxth	r2, r3
 8006026:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800602a:	4313      	orrs	r3, r2
 800602c:	b21b      	sxth	r3, r3
 800602e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006030:	89fb      	ldrh	r3, [r7, #14]
}
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006056:	2b20      	cmp	r3, #32
 8006058:	d004      	beq.n	8006064 <USBD_StdDevReq+0x24>
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d002      	beq.n	8006064 <USBD_StdDevReq+0x24>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <USBD_StdDevReq+0x38>
 8006062:	e050      	b.n	8006106 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
 8006072:	4603      	mov	r3, r0
 8006074:	73fb      	strb	r3, [r7, #15]
    break;
 8006076:	e04b      	b.n	8006110 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b09      	cmp	r3, #9
 800607e:	d83c      	bhi.n	80060fa <USBD_StdDevReq+0xba>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <USBD_StdDevReq+0x48>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060dd 	.word	0x080060dd
 800608c:	080060f1 	.word	0x080060f1
 8006090:	080060fb 	.word	0x080060fb
 8006094:	080060e7 	.word	0x080060e7
 8006098:	080060fb 	.word	0x080060fb
 800609c:	080060bb 	.word	0x080060bb
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060fb 	.word	0x080060fb
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060c5 	.word	0x080060c5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f9ce 	bl	8006454 <USBD_GetDescriptor>
      break;
 80060b8:	e024      	b.n	8006104 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fb33 	bl	8006728 <USBD_SetAddress>
      break;
 80060c2:	e01f      	b.n	8006104 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fb70 	bl	80067ac <USBD_SetConfig>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
      break;
 80060d0:	e018      	b.n	8006104 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fc0d 	bl	80068f4 <USBD_GetConfig>
      break;
 80060da:	e013      	b.n	8006104 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fc3c 	bl	800695c <USBD_GetStatus>
      break;
 80060e4:	e00e      	b.n	8006104 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fc6a 	bl	80069c2 <USBD_SetFeature>
      break;
 80060ee:	e009      	b.n	8006104 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fc79 	bl	80069ea <USBD_ClrFeature>
      break;
 80060f8:	e004      	b.n	8006104 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fccf 	bl	8006aa0 <USBD_CtlError>
      break;
 8006102:	bf00      	nop
    }
    break;
 8006104:	e004      	b.n	8006110 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fcc9 	bl	8006aa0 <USBD_CtlError>
    break;
 800610e:	bf00      	nop
  }

  return ret;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop

0800611c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006132:	2b20      	cmp	r3, #32
 8006134:	d003      	beq.n	800613e <USBD_StdItfReq+0x22>
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d001      	beq.n	800613e <USBD_StdItfReq+0x22>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d12a      	bne.n	8006194 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006144:	3b01      	subs	r3, #1
 8006146:	2b02      	cmp	r3, #2
 8006148:	d81d      	bhi.n	8006186 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	889b      	ldrh	r3, [r3, #4]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b01      	cmp	r3, #1
 8006152:	d813      	bhi.n	800617c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	88db      	ldrh	r3, [r3, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d110      	bne.n	8006190 <USBD_StdItfReq+0x74>
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fd5e 	bl	8006c36 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800617a:	e009      	b.n	8006190 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fc8e 	bl	8006aa0 <USBD_CtlError>
      break;
 8006184:	e004      	b.n	8006190 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fc89 	bl	8006aa0 <USBD_CtlError>
      break;
 800618e:	e000      	b.n	8006192 <USBD_StdItfReq+0x76>
      break;
 8006190:	bf00      	nop
    }
    break;
 8006192:	e004      	b.n	800619e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fc82 	bl	8006aa0 <USBD_CtlError>
    break;
 800619c:	bf00      	nop
  }

  return ret;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	889b      	ldrh	r3, [r3, #4]
 80061ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d004      	beq.n	80061d2 <USBD_StdEPReq+0x2a>
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	d002      	beq.n	80061d2 <USBD_StdEPReq+0x2a>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <USBD_StdEPReq+0x3e>
 80061d0:	e135      	b.n	800643e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]
    break;
 80061e4:	e130      	b.n	8006448 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d03e      	beq.n	800626c <USBD_StdEPReq+0xc4>
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d002      	beq.n	80061f8 <USBD_StdEPReq+0x50>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d077      	beq.n	80062e6 <USBD_StdEPReq+0x13e>
 80061f6:	e11c      	b.n	8006432 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d002      	beq.n	8006208 <USBD_StdEPReq+0x60>
 8006202:	2b03      	cmp	r3, #3
 8006204:	d015      	beq.n	8006232 <USBD_StdEPReq+0x8a>
 8006206:	e02b      	b.n	8006260 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006208:	7bbb      	ldrb	r3, [r7, #14]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <USBD_StdEPReq+0x80>
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d009      	beq.n	8006228 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 f8f9 	bl	8007410 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 f8f5 	bl	8007410 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006226:	e020      	b.n	800626a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fc38 	bl	8006aa0 <USBD_CtlError>
        break;
 8006230:	e01b      	b.n	800626a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	885b      	ldrh	r3, [r3, #2]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10e      	bne.n	8006258 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <USBD_StdEPReq+0xb0>
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	2b80      	cmp	r3, #128	; 0x80
 8006244:	d008      	beq.n	8006258 <USBD_StdEPReq+0xb0>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	88db      	ldrh	r3, [r3, #6]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 f8dc 	bl	8007410 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fcec 	bl	8006c36 <USBD_CtlSendStatus>

        break;
 800625e:	e004      	b.n	800626a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fc1c 	bl	8006aa0 <USBD_CtlError>
        break;
 8006268:	bf00      	nop
      }
      break;
 800626a:	e0e7      	b.n	800643c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006272:	2b02      	cmp	r3, #2
 8006274:	d002      	beq.n	800627c <USBD_StdEPReq+0xd4>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d015      	beq.n	80062a6 <USBD_StdEPReq+0xfe>
 800627a:	e02d      	b.n	80062d8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00c      	beq.n	800629c <USBD_StdEPReq+0xf4>
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d009      	beq.n	800629c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f8bf 	bl	8007410 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006292:	2180      	movs	r1, #128	; 0x80
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f8bb 	bl	8007410 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800629a:	e023      	b.n	80062e4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fbfe 	bl	8006aa0 <USBD_CtlError>
        break;
 80062a4:	e01e      	b.n	80062e4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	885b      	ldrh	r3, [r3, #2]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d119      	bne.n	80062e2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f8c6 	bl	800744e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fcb7 	bl	8006c36 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
        }
        break;
 80062d6:	e004      	b.n	80062e2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fbe0 	bl	8006aa0 <USBD_CtlError>
        break;
 80062e0:	e000      	b.n	80062e4 <USBD_StdEPReq+0x13c>
        break;
 80062e2:	bf00      	nop
      }
      break;
 80062e4:	e0aa      	b.n	800643c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d002      	beq.n	80062f6 <USBD_StdEPReq+0x14e>
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d032      	beq.n	800635a <USBD_StdEPReq+0x1b2>
 80062f4:	e097      	b.n	8006426 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <USBD_StdEPReq+0x164>
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d004      	beq.n	800630c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fbcb 	bl	8006aa0 <USBD_CtlError>
          break;
 800630a:	e091      	b.n	8006430 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800630c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006310:	2b00      	cmp	r3, #0
 8006312:	da0b      	bge.n	800632c <USBD_StdEPReq+0x184>
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	3310      	adds	r3, #16
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	4413      	add	r3, r2
 8006328:	3304      	adds	r3, #4
 800632a:	e00b      	b.n	8006344 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	3304      	adds	r3, #4
 8006344:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2202      	movs	r2, #2
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fc15 	bl	8006b82 <USBD_CtlSendData>
        break;
 8006358:	e06a      	b.n	8006430 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800635a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800635e:	2b00      	cmp	r3, #0
 8006360:	da11      	bge.n	8006386 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	f003 020f 	and.w	r2, r3, #15
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	3324      	adds	r3, #36	; 0x24
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d117      	bne.n	80063ac <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fb8e 	bl	8006aa0 <USBD_CtlError>
            break;
 8006384:	e054      	b.n	8006430 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	f003 020f 	and.w	r2, r3, #15
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fb7b 	bl	8006aa0 <USBD_CtlError>
            break;
 80063aa:	e041      	b.n	8006430 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	da0b      	bge.n	80063cc <USBD_StdEPReq+0x224>
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	3310      	adds	r3, #16
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	4413      	add	r3, r2
 80063c8:	3304      	adds	r3, #4
 80063ca:	e00b      	b.n	80063e4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80063cc:	7bbb      	ldrb	r3, [r7, #14]
 80063ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4413      	add	r3, r2
 80063e2:	3304      	adds	r3, #4
 80063e4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <USBD_StdEPReq+0x24a>
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	2b80      	cmp	r3, #128	; 0x80
 80063f0:	d103      	bne.n	80063fa <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	e00e      	b.n	8006418 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 f844 	bl	800748c <USBD_LL_IsStallEP>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e002      	b.n	8006418 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2202      	movs	r2, #2
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fbaf 	bl	8006b82 <USBD_CtlSendData>
          break;
 8006424:	e004      	b.n	8006430 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fb39 	bl	8006aa0 <USBD_CtlError>
        break;
 800642e:	bf00      	nop
      }
      break;
 8006430:	e004      	b.n	800643c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fb33 	bl	8006aa0 <USBD_CtlError>
      break;
 800643a:	bf00      	nop
    }
    break;
 800643c:	e004      	b.n	8006448 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fb2d 	bl	8006aa0 <USBD_CtlError>
    break;
 8006446:	bf00      	nop
  }

  return ret;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	885b      	ldrh	r3, [r3, #2]
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	2b06      	cmp	r3, #6
 8006476:	f200 8128 	bhi.w	80066ca <USBD_GetDescriptor+0x276>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <USBD_GetDescriptor+0x2c>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	0800649d 	.word	0x0800649d
 8006484:	080064b5 	.word	0x080064b5
 8006488:	080064f5 	.word	0x080064f5
 800648c:	080066cb 	.word	0x080066cb
 8006490:	080066cb 	.word	0x080066cb
 8006494:	0800666b 	.word	0x0800666b
 8006498:	08006697 	.word	0x08006697
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	7c12      	ldrb	r2, [r2, #16]
 80064a8:	f107 0108 	add.w	r1, r7, #8
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	60f8      	str	r0, [r7, #12]
    break;
 80064b2:	e112      	b.n	80066da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	7c1b      	ldrb	r3, [r3, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f107 0208 	add.w	r2, r7, #8
 80064c8:	4610      	mov	r0, r2
 80064ca:	4798      	blx	r3
 80064cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	2202      	movs	r2, #2
 80064d4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80064d6:	e100      	b.n	80066da <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	f107 0208 	add.w	r2, r7, #8
 80064e4:	4610      	mov	r0, r2
 80064e6:	4798      	blx	r3
 80064e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3301      	adds	r3, #1
 80064ee:	2202      	movs	r2, #2
 80064f0:	701a      	strb	r2, [r3, #0]
    break;
 80064f2:	e0f2      	b.n	80066da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	885b      	ldrh	r3, [r3, #2]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	f200 80ac 	bhi.w	8006658 <USBD_GetDescriptor+0x204>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <USBD_GetDescriptor+0xb4>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006521 	.word	0x08006521
 800650c:	08006555 	.word	0x08006555
 8006510:	08006589 	.word	0x08006589
 8006514:	080065bd 	.word	0x080065bd
 8006518:	080065f1 	.word	0x080065f1
 800651c:	08006625 	.word	0x08006625
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	7c12      	ldrb	r2, [r2, #16]
 8006538:	f107 0108 	add.w	r1, r7, #8
 800653c:	4610      	mov	r0, r2
 800653e:	4798      	blx	r3
 8006540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006542:	e091      	b.n	8006668 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 faaa 	bl	8006aa0 <USBD_CtlError>
        err++;
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	3301      	adds	r3, #1
 8006550:	72fb      	strb	r3, [r7, #11]
      break;
 8006552:	e089      	b.n	8006668 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	7c12      	ldrb	r2, [r2, #16]
 800656c:	f107 0108 	add.w	r1, r7, #8
 8006570:	4610      	mov	r0, r2
 8006572:	4798      	blx	r3
 8006574:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006576:	e077      	b.n	8006668 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa90 	bl	8006aa0 <USBD_CtlError>
        err++;
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	3301      	adds	r3, #1
 8006584:	72fb      	strb	r3, [r7, #11]
      break;
 8006586:	e06f      	b.n	8006668 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	7c12      	ldrb	r2, [r2, #16]
 80065a0:	f107 0108 	add.w	r1, r7, #8
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
 80065a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065aa:	e05d      	b.n	8006668 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa76 	bl	8006aa0 <USBD_CtlError>
        err++;
 80065b4:	7afb      	ldrb	r3, [r7, #11]
 80065b6:	3301      	adds	r3, #1
 80065b8:	72fb      	strb	r3, [r7, #11]
      break;
 80065ba:	e055      	b.n	8006668 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	7c12      	ldrb	r2, [r2, #16]
 80065d4:	f107 0108 	add.w	r1, r7, #8
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065de:	e043      	b.n	8006668 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa5c 	bl	8006aa0 <USBD_CtlError>
        err++;
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	3301      	adds	r3, #1
 80065ec:	72fb      	strb	r3, [r7, #11]
      break;
 80065ee:	e03b      	b.n	8006668 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	7c12      	ldrb	r2, [r2, #16]
 8006608:	f107 0108 	add.w	r1, r7, #8
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
 8006610:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006612:	e029      	b.n	8006668 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa42 	bl	8006aa0 <USBD_CtlError>
        err++;
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	3301      	adds	r3, #1
 8006620:	72fb      	strb	r3, [r7, #11]
      break;
 8006622:	e021      	b.n	8006668 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	7c12      	ldrb	r2, [r2, #16]
 800663c:	f107 0108 	add.w	r1, r7, #8
 8006640:	4610      	mov	r0, r2
 8006642:	4798      	blx	r3
 8006644:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006646:	e00f      	b.n	8006668 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa28 	bl	8006aa0 <USBD_CtlError>
        err++;
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	3301      	adds	r3, #1
 8006654:	72fb      	strb	r3, [r7, #11]
      break;
 8006656:	e007      	b.n	8006668 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fa20 	bl	8006aa0 <USBD_CtlError>
      err++;
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	3301      	adds	r3, #1
 8006664:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006666:	bf00      	nop
    }
    break;
 8006668:	e037      	b.n	80066da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	7c1b      	ldrb	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	f107 0208 	add.w	r2, r7, #8
 800667e:	4610      	mov	r0, r2
 8006680:	4798      	blx	r3
 8006682:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006684:	e029      	b.n	80066da <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fa09 	bl	8006aa0 <USBD_CtlError>
      err++;
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	3301      	adds	r3, #1
 8006692:	72fb      	strb	r3, [r7, #11]
    break;
 8006694:	e021      	b.n	80066da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7c1b      	ldrb	r3, [r3, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f107 0208 	add.w	r2, r7, #8
 80066aa:	4610      	mov	r0, r2
 80066ac:	4798      	blx	r3
 80066ae:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	2207      	movs	r2, #7
 80066b6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80066b8:	e00f      	b.n	80066da <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f9ef 	bl	8006aa0 <USBD_CtlError>
      err++;
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	3301      	adds	r3, #1
 80066c6:	72fb      	strb	r3, [r7, #11]
    break;
 80066c8:	e007      	b.n	80066da <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9e7 	bl	8006aa0 <USBD_CtlError>
    err++;
 80066d2:	7afb      	ldrb	r3, [r7, #11]
 80066d4:	3301      	adds	r3, #1
 80066d6:	72fb      	strb	r3, [r7, #11]
    break;
 80066d8:	bf00      	nop
  }

  if (err != 0U)
 80066da:	7afb      	ldrb	r3, [r7, #11]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d11e      	bne.n	800671e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	88db      	ldrh	r3, [r3, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d016      	beq.n	8006716 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80066e8:	893b      	ldrh	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00e      	beq.n	800670c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	88da      	ldrh	r2, [r3, #6]
 80066f2:	893b      	ldrh	r3, [r7, #8]
 80066f4:	4293      	cmp	r3, r2
 80066f6:	bf28      	it	cs
 80066f8:	4613      	movcs	r3, r2
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80066fe:	893b      	ldrh	r3, [r7, #8]
 8006700:	461a      	mov	r2, r3
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fa3c 	bl	8006b82 <USBD_CtlSendData>
 800670a:	e009      	b.n	8006720 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9c6 	bl	8006aa0 <USBD_CtlError>
 8006714:	e004      	b.n	8006720 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa8d 	bl	8006c36 <USBD_CtlSendStatus>
 800671c:	e000      	b.n	8006720 <USBD_GetDescriptor+0x2cc>
    return;
 800671e:	bf00      	nop
    }
  }
}
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop

08006728 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	889b      	ldrh	r3, [r3, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d130      	bne.n	800679c <USBD_SetAddress+0x74>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	88db      	ldrh	r3, [r3, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d12c      	bne.n	800679c <USBD_SetAddress+0x74>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	885b      	ldrh	r3, [r3, #2]
 8006746:	2b7f      	cmp	r3, #127	; 0x7f
 8006748:	d828      	bhi.n	800679c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	885b      	ldrh	r3, [r3, #2]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006754:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675c:	2b03      	cmp	r3, #3
 800675e:	d104      	bne.n	800676a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f99c 	bl	8006aa0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006768:	e01c      	b.n	80067a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7bfa      	ldrb	r2, [r7, #15]
 800676e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 feb4 	bl	80074e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa5a 	bl	8006c36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006790:	e008      	b.n	80067a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679a:	e003      	b.n	80067a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f97e 	bl	8006aa0 <USBD_CtlError>
  }
}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	885b      	ldrh	r3, [r3, #2]
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	4b4b      	ldr	r3, [pc, #300]	; (80068f0 <USBD_SetConfig+0x144>)
 80067c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067c4:	4b4a      	ldr	r3, [pc, #296]	; (80068f0 <USBD_SetConfig+0x144>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d905      	bls.n	80067d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f966 	bl	8006aa0 <USBD_CtlError>
    return USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e087      	b.n	80068e8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d002      	beq.n	80067e8 <USBD_SetConfig+0x3c>
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d025      	beq.n	8006832 <USBD_SetConfig+0x86>
 80067e6:	e071      	b.n	80068cc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80067e8:	4b41      	ldr	r3, [pc, #260]	; (80068f0 <USBD_SetConfig+0x144>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01c      	beq.n	800682a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80067f0:	4b3f      	ldr	r3, [pc, #252]	; (80068f0 <USBD_SetConfig+0x144>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80067fa:	4b3d      	ldr	r3, [pc, #244]	; (80068f0 <USBD_SetConfig+0x144>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff f9a7 	bl	8005b54 <USBD_SetClassConfig>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f944 	bl	8006aa0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006818:	e065      	b.n	80068e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa0b 	bl	8006c36 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2203      	movs	r2, #3
 8006824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006828:	e05d      	b.n	80068e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa03 	bl	8006c36 <USBD_CtlSendStatus>
    break;
 8006830:	e059      	b.n	80068e6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006832:	4b2f      	ldr	r3, [pc, #188]	; (80068f0 <USBD_SetConfig+0x144>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d112      	bne.n	8006860 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2202      	movs	r2, #2
 800683e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006842:	4b2b      	ldr	r3, [pc, #172]	; (80068f0 <USBD_SetConfig+0x144>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800684c:	4b28      	ldr	r3, [pc, #160]	; (80068f0 <USBD_SetConfig+0x144>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff f99a 	bl	8005b8c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f9ec 	bl	8006c36 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800685e:	e042      	b.n	80068e6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006860:	4b23      	ldr	r3, [pc, #140]	; (80068f0 <USBD_SetConfig+0x144>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d02a      	beq.n	80068c4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff f988 	bl	8005b8c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800687c:	4b1c      	ldr	r3, [pc, #112]	; (80068f0 <USBD_SetConfig+0x144>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006886:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <USBD_SetConfig+0x144>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff f961 	bl	8005b54 <USBD_SetClassConfig>
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00f      	beq.n	80068bc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f8fe 	bl	8006aa0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff f96d 	bl	8005b8c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80068ba:	e014      	b.n	80068e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f9ba 	bl	8006c36 <USBD_CtlSendStatus>
    break;
 80068c2:	e010      	b.n	80068e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f9b6 	bl	8006c36 <USBD_CtlSendStatus>
    break;
 80068ca:	e00c      	b.n	80068e6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8e6 	bl	8006aa0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <USBD_SetConfig+0x144>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff f956 	bl	8005b8c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	73fb      	strb	r3, [r7, #15]
    break;
 80068e4:	bf00      	nop
  }

  return ret;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	2000061c 	.word	0x2000061c

080068f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	88db      	ldrh	r3, [r3, #6]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d004      	beq.n	8006910 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f8c9 	bl	8006aa0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800690e:	e021      	b.n	8006954 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006916:	2b01      	cmp	r3, #1
 8006918:	db17      	blt.n	800694a <USBD_GetConfig+0x56>
 800691a:	2b02      	cmp	r3, #2
 800691c:	dd02      	ble.n	8006924 <USBD_GetConfig+0x30>
 800691e:	2b03      	cmp	r3, #3
 8006920:	d00b      	beq.n	800693a <USBD_GetConfig+0x46>
 8006922:	e012      	b.n	800694a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3308      	adds	r3, #8
 800692e:	2201      	movs	r2, #1
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f925 	bl	8006b82 <USBD_CtlSendData>
      break;
 8006938:	e00c      	b.n	8006954 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	2201      	movs	r2, #1
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f91d 	bl	8006b82 <USBD_CtlSendData>
      break;
 8006948:	e004      	b.n	8006954 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f8a7 	bl	8006aa0 <USBD_CtlError>
      break;
 8006952:	bf00      	nop
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	3b01      	subs	r3, #1
 800696e:	2b02      	cmp	r3, #2
 8006970:	d81e      	bhi.n	80069b0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	88db      	ldrh	r3, [r3, #6]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d004      	beq.n	8006984 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f88f 	bl	8006aa0 <USBD_CtlError>
      break;
 8006982:	e01a      	b.n	80069ba <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f043 0202 	orr.w	r2, r3, #2
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	330c      	adds	r3, #12
 80069a4:	2202      	movs	r2, #2
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8ea 	bl	8006b82 <USBD_CtlSendData>
    break;
 80069ae:	e004      	b.n	80069ba <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f874 	bl	8006aa0 <USBD_CtlError>
    break;
 80069b8:	bf00      	nop
  }
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	885b      	ldrh	r3, [r3, #2]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d106      	bne.n	80069e2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f92a 	bl	8006c36 <USBD_CtlSendStatus>
  }
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fa:	3b01      	subs	r3, #1
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d80b      	bhi.n	8006a18 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	885b      	ldrh	r3, [r3, #2]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d10c      	bne.n	8006a22 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f910 	bl	8006c36 <USBD_CtlSendStatus>
      }
      break;
 8006a16:	e004      	b.n	8006a22 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f840 	bl	8006aa0 <USBD_CtlError>
      break;
 8006a20:	e000      	b.n	8006a24 <USBD_ClrFeature+0x3a>
      break;
 8006a22:	bf00      	nop
  }
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3301      	adds	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f7ff fad3 	bl	8006002 <SWAPBYTE>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7ff fac6 	bl	8006002 <SWAPBYTE>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fab9 	bl	8006002 <SWAPBYTE>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	80da      	strh	r2, [r3, #6]
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fcaf 	bl	8007410 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fcab 	bl	8007410 <USBD_LL_StallEP>
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d036      	beq.n	8006b46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006adc:	6938      	ldr	r0, [r7, #16]
 8006ade:	f000 f836 	bl	8006b4e <USBD_GetLen>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	7812      	ldrb	r2, [r2, #0]
 8006afa:	701a      	strb	r2, [r3, #0]
  idx++;
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	3301      	adds	r3, #1
 8006b00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4413      	add	r3, r2
 8006b08:	2203      	movs	r2, #3
 8006b0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b12:	e013      	b.n	8006b3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4413      	add	r3, r2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	7812      	ldrb	r2, [r2, #0]
 8006b1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	3301      	adds	r3, #1
 8006b24:	613b      	str	r3, [r7, #16]
    idx++;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4413      	add	r3, r2
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e7      	bne.n	8006b14 <USBD_GetString+0x52>
 8006b44:	e000      	b.n	8006b48 <USBD_GetString+0x86>
    return;
 8006b46:	bf00      	nop
  }
}
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b5e:	e005      	b.n	8006b6c <USBD_GetLen+0x1e>
  {
    len++;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	3301      	adds	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f5      	bne.n	8006b60 <USBD_GetLen+0x12>
  }

  return len;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 fcba 	bl	8007522 <USBD_LL_Transmit>

  return USBD_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	2100      	movs	r1, #0
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fca9 	bl	8007522 <USBD_LL_Transmit>

  return USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2203      	movs	r2, #3
 8006bea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	2100      	movs	r1, #0
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fcad 	bl	8007564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	2100      	movs	r1, #0
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fc9c 	bl	8007564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2204      	movs	r2, #4
 8006c42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c46:	2300      	movs	r3, #0
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fc68 	bl	8007522 <USBD_LL_Transmit>

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2205      	movs	r2, #5
 8006c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fc76 	bl	8007564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4912      	ldr	r1, [pc, #72]	; (8006cd4 <MX_USB_DEVICE_Init+0x50>)
 8006c8c:	4812      	ldr	r0, [pc, #72]	; (8006cd8 <MX_USB_DEVICE_Init+0x54>)
 8006c8e:	f7fe fef3 	bl	8005a78 <USBD_Init>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c98:	f7f9 fec2 	bl	8000a20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c9c:	490f      	ldr	r1, [pc, #60]	; (8006cdc <MX_USB_DEVICE_Init+0x58>)
 8006c9e:	480e      	ldr	r0, [pc, #56]	; (8006cd8 <MX_USB_DEVICE_Init+0x54>)
 8006ca0:	f7fe ff20 	bl	8005ae4 <USBD_RegisterClass>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006caa:	f7f9 feb9 	bl	8000a20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006cae:	490c      	ldr	r1, [pc, #48]	; (8006ce0 <MX_USB_DEVICE_Init+0x5c>)
 8006cb0:	4809      	ldr	r0, [pc, #36]	; (8006cd8 <MX_USB_DEVICE_Init+0x54>)
 8006cb2:	f7fe fe75 	bl	80059a0 <USBD_CDC_RegisterInterface>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006cbc:	f7f9 feb0 	bl	8000a20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cc0:	4805      	ldr	r0, [pc, #20]	; (8006cd8 <MX_USB_DEVICE_Init+0x54>)
 8006cc2:	f7fe ff30 	bl	8005b26 <USBD_Start>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ccc:	f7f9 fea8 	bl	8000a20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cd0:	bf00      	nop
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000140 	.word	0x20000140
 8006cd8:	20000680 	.word	0x20000680
 8006cdc:	20000028 	.word	0x20000028
 8006ce0:	2000012c 	.word	0x2000012c

08006ce4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4905      	ldr	r1, [pc, #20]	; (8006d00 <CDC_Init_FS+0x1c>)
 8006cec:	4805      	ldr	r0, [pc, #20]	; (8006d04 <CDC_Init_FS+0x20>)
 8006cee:	f7fe fe6c 	bl	80059ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006cf2:	4905      	ldr	r1, [pc, #20]	; (8006d08 <CDC_Init_FS+0x24>)
 8006cf4:	4803      	ldr	r0, [pc, #12]	; (8006d04 <CDC_Init_FS+0x20>)
 8006cf6:	f7fe fe81 	bl	80059fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006cfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20001150 	.word	0x20001150
 8006d04:	20000680 	.word	0x20000680
 8006d08:	20000950 	.word	0x20000950

08006d0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	2b23      	cmp	r3, #35	; 0x23
 8006d30:	d84a      	bhi.n	8006dc8 <CDC_Control_FS+0xac>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <CDC_Control_FS+0x1c>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006dc9 	.word	0x08006dc9
 8006d3c:	08006dc9 	.word	0x08006dc9
 8006d40:	08006dc9 	.word	0x08006dc9
 8006d44:	08006dc9 	.word	0x08006dc9
 8006d48:	08006dc9 	.word	0x08006dc9
 8006d4c:	08006dc9 	.word	0x08006dc9
 8006d50:	08006dc9 	.word	0x08006dc9
 8006d54:	08006dc9 	.word	0x08006dc9
 8006d58:	08006dc9 	.word	0x08006dc9
 8006d5c:	08006dc9 	.word	0x08006dc9
 8006d60:	08006dc9 	.word	0x08006dc9
 8006d64:	08006dc9 	.word	0x08006dc9
 8006d68:	08006dc9 	.word	0x08006dc9
 8006d6c:	08006dc9 	.word	0x08006dc9
 8006d70:	08006dc9 	.word	0x08006dc9
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006dc9 	.word	0x08006dc9
 8006d7c:	08006dc9 	.word	0x08006dc9
 8006d80:	08006dc9 	.word	0x08006dc9
 8006d84:	08006dc9 	.word	0x08006dc9
 8006d88:	08006dc9 	.word	0x08006dc9
 8006d8c:	08006dc9 	.word	0x08006dc9
 8006d90:	08006dc9 	.word	0x08006dc9
 8006d94:	08006dc9 	.word	0x08006dc9
 8006d98:	08006dc9 	.word	0x08006dc9
 8006d9c:	08006dc9 	.word	0x08006dc9
 8006da0:	08006dc9 	.word	0x08006dc9
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dc9 	.word	0x08006dc9
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dc9 	.word	0x08006dc9
 8006db4:	08006dc9 	.word	0x08006dc9
 8006db8:	08006dc9 	.word	0x08006dc9
 8006dbc:	08006dc9 	.word	0x08006dc9
 8006dc0:	08006dc9 	.word	0x08006dc9
 8006dc4:	08006dc9 	.word	0x08006dc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006dc8:	bf00      	nop
  }

  return (USBD_OK);
 8006dca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4805      	ldr	r0, [pc, #20]	; (8006dfc <CDC_Receive_FS+0x24>)
 8006de6:	f7fe fe09 	bl	80059fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006dea:	4804      	ldr	r0, [pc, #16]	; (8006dfc <CDC_Receive_FS+0x24>)
 8006dec:	f7fe fe1a 	bl	8005a24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006df0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000680 	.word	0x20000680

08006e00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	6039      	str	r1, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2212      	movs	r2, #18
 8006e34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e36:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	2000015c 	.word	0x2000015c

08006e48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2204      	movs	r2, #4
 8006e58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e5a:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20000170 	.word	0x20000170

08006e6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d105      	bne.n	8006e8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	4907      	ldr	r1, [pc, #28]	; (8006ea0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e82:	4808      	ldr	r0, [pc, #32]	; (8006ea4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e84:	f7ff fe1d 	bl	8006ac2 <USBD_GetString>
 8006e88:	e004      	b.n	8006e94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e8e:	4805      	ldr	r0, [pc, #20]	; (8006ea4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e90:	f7ff fe17 	bl	8006ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20001950 	.word	0x20001950
 8006ea4:	08007870 	.word	0x08007870

08006ea8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	4904      	ldr	r1, [pc, #16]	; (8006ec8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006eb8:	4804      	ldr	r0, [pc, #16]	; (8006ecc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006eba:	f7ff fe02 	bl	8006ac2 <USBD_GetString>
  return USBD_StrDesc;
 8006ebe:	4b02      	ldr	r3, [pc, #8]	; (8006ec8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20001950 	.word	0x20001950
 8006ecc:	08007888 	.word	0x08007888

08006ed0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	6039      	str	r1, [r7, #0]
 8006eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	221a      	movs	r2, #26
 8006ee0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ee2:	f000 f843 	bl	8006f6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ee6:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000174 	.word	0x20000174

08006ef4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4907      	ldr	r1, [pc, #28]	; (8006f28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f0a:	4808      	ldr	r0, [pc, #32]	; (8006f2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f0c:	f7ff fdd9 	bl	8006ac2 <USBD_GetString>
 8006f10:	e004      	b.n	8006f1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4904      	ldr	r1, [pc, #16]	; (8006f28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f16:	4805      	ldr	r0, [pc, #20]	; (8006f2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f18:	f7ff fdd3 	bl	8006ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20001950 	.word	0x20001950
 8006f2c:	0800789c 	.word	0x0800789c

08006f30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	6039      	str	r1, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d105      	bne.n	8006f4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	4907      	ldr	r1, [pc, #28]	; (8006f64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f46:	4808      	ldr	r0, [pc, #32]	; (8006f68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f48:	f7ff fdbb 	bl	8006ac2 <USBD_GetString>
 8006f4c:	e004      	b.n	8006f58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	4904      	ldr	r1, [pc, #16]	; (8006f64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f52:	4805      	ldr	r0, [pc, #20]	; (8006f68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f54:	f7ff fdb5 	bl	8006ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f58:	4b02      	ldr	r3, [pc, #8]	; (8006f64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20001950 	.word	0x20001950
 8006f68:	080078a8 	.word	0x080078a8

08006f6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <Get_SerialNum+0x44>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f78:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <Get_SerialNum+0x48>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <Get_SerialNum+0x4c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4413      	add	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f92:	2208      	movs	r2, #8
 8006f94:	4909      	ldr	r1, [pc, #36]	; (8006fbc <Get_SerialNum+0x50>)
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f814 	bl	8006fc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	4908      	ldr	r1, [pc, #32]	; (8006fc0 <Get_SerialNum+0x54>)
 8006fa0:	68b8      	ldr	r0, [r7, #8]
 8006fa2:	f000 f80f 	bl	8006fc4 <IntToUnicode>
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	1fff7a10 	.word	0x1fff7a10
 8006fb4:	1fff7a14 	.word	0x1fff7a14
 8006fb8:	1fff7a18 	.word	0x1fff7a18
 8006fbc:	20000176 	.word	0x20000176
 8006fc0:	20000186 	.word	0x20000186

08006fc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
 8006fda:	e027      	b.n	800702c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	0f1b      	lsrs	r3, r3, #28
 8006fe0:	2b09      	cmp	r3, #9
 8006fe2:	d80b      	bhi.n	8006ffc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	0f1b      	lsrs	r3, r3, #28
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	4619      	mov	r1, r3
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	440b      	add	r3, r1
 8006ff4:	3230      	adds	r2, #48	; 0x30
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	e00a      	b.n	8007012 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	0f1b      	lsrs	r3, r3, #28
 8007000:	b2da      	uxtb	r2, r3
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	4619      	mov	r1, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	440b      	add	r3, r1
 800700c:	3237      	adds	r2, #55	; 0x37
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	3301      	adds	r3, #1
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	3301      	adds	r3, #1
 800702a:	75fb      	strb	r3, [r7, #23]
 800702c:	7dfa      	ldrb	r2, [r7, #23]
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	429a      	cmp	r2, r3
 8007032:	d3d3      	bcc.n	8006fdc <IntToUnicode+0x18>
  }
}
 8007034:	bf00      	nop
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007048:	f107 0314 	add.w	r3, r7, #20
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	609a      	str	r2, [r3, #8]
 8007054:	60da      	str	r2, [r3, #12]
 8007056:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007060:	d13a      	bne.n	80070d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007062:	2300      	movs	r3, #0
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <HAL_PCD_MspInit+0xa0>)
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <HAL_PCD_MspInit+0xa0>)
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	6313      	str	r3, [r2, #48]	; 0x30
 8007072:	4b1b      	ldr	r3, [pc, #108]	; (80070e0 <HAL_PCD_MspInit+0xa0>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	613b      	str	r3, [r7, #16]
 800707c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800707e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007084:	2302      	movs	r3, #2
 8007086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007088:	2300      	movs	r3, #0
 800708a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800708c:	2303      	movs	r3, #3
 800708e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007090:	230a      	movs	r3, #10
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	4619      	mov	r1, r3
 800709a:	4812      	ldr	r0, [pc, #72]	; (80070e4 <HAL_PCD_MspInit+0xa4>)
 800709c:	f7fa fb88 	bl	80017b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070a0:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a4:	4a0e      	ldr	r2, [pc, #56]	; (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070aa:	6353      	str	r3, [r2, #52]	; 0x34
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b4:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070ba:	6453      	str	r3, [r2, #68]	; 0x44
 80070bc:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070c8:	2200      	movs	r2, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	2043      	movs	r0, #67	; 0x43
 80070ce:	f7fa fb38 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070d2:	2043      	movs	r0, #67	; 0x43
 80070d4:	f7fa fb51 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070d8:	bf00      	nop
 80070da:	3728      	adds	r7, #40	; 0x28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40020000 	.word	0x40020000

080070e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7fe fd5c 	bl	8005bbc <USBD_LL_SetupStage>
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	4619      	mov	r1, r3
 8007136:	f7fe fd94 	bl	8005c62 <USBD_LL_DataOutStage>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4613      	mov	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	3348      	adds	r3, #72	; 0x48
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	4619      	mov	r1, r3
 800716a:	f7fe fddd 	bl	8005d28 <USBD_LL_DataInStage>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fee1 	bl	8005f4c <USBD_LL_SOF>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d001      	beq.n	80071aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80071a6:	f7f9 fc3b 	bl	8000a20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071b0:	7bfa      	ldrb	r2, [r7, #15]
 80071b2:	4611      	mov	r1, r2
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fe8e 	bl	8005ed6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fe47 	bl	8005e54 <USBD_LL_Reset>
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fe89 	bl	8005ef6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071f6:	f043 0301 	orr.w	r3, r3, #1
 80071fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007204:	4b04      	ldr	r3, [pc, #16]	; (8007218 <HAL_PCD_SuspendCallback+0x48>)
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	4a03      	ldr	r2, [pc, #12]	; (8007218 <HAL_PCD_SuspendCallback+0x48>)
 800720a:	f043 0306 	orr.w	r3, r3, #6
 800720e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	e000ed00 	.word	0xe000ed00

0800721c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fe78 	bl	8005f20 <USBD_LL_Resume>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800724a:	78fa      	ldrb	r2, [r7, #3]
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fea3 	bl	8005f9a <USBD_LL_IsoOUTIncomplete>
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800726e:	78fa      	ldrb	r2, [r7, #3]
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fe84 	bl	8005f80 <USBD_LL_IsoINIncomplete>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fe90 	bl	8005fb4 <USBD_LL_DevConnected>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fe8d 	bl	8005fca <USBD_LL_DevDisconnected>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d13c      	bne.n	8007342 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072c8:	4a20      	ldr	r2, [pc, #128]	; (800734c <USBD_LL_Init+0x94>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a1e      	ldr	r2, [pc, #120]	; (800734c <USBD_LL_Init+0x94>)
 80072d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072d8:	4b1c      	ldr	r3, [pc, #112]	; (800734c <USBD_LL_Init+0x94>)
 80072da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072e0:	4b1a      	ldr	r3, [pc, #104]	; (800734c <USBD_LL_Init+0x94>)
 80072e2:	2204      	movs	r2, #4
 80072e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072e6:	4b19      	ldr	r3, [pc, #100]	; (800734c <USBD_LL_Init+0x94>)
 80072e8:	2202      	movs	r2, #2
 80072ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <USBD_LL_Init+0x94>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072f2:	4b16      	ldr	r3, [pc, #88]	; (800734c <USBD_LL_Init+0x94>)
 80072f4:	2202      	movs	r2, #2
 80072f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072f8:	4b14      	ldr	r3, [pc, #80]	; (800734c <USBD_LL_Init+0x94>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <USBD_LL_Init+0x94>)
 8007300:	2200      	movs	r2, #0
 8007302:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007304:	4b11      	ldr	r3, [pc, #68]	; (800734c <USBD_LL_Init+0x94>)
 8007306:	2200      	movs	r2, #0
 8007308:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800730a:	4b10      	ldr	r3, [pc, #64]	; (800734c <USBD_LL_Init+0x94>)
 800730c:	2200      	movs	r2, #0
 800730e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007310:	4b0e      	ldr	r3, [pc, #56]	; (800734c <USBD_LL_Init+0x94>)
 8007312:	2200      	movs	r2, #0
 8007314:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007316:	480d      	ldr	r0, [pc, #52]	; (800734c <USBD_LL_Init+0x94>)
 8007318:	f7fb f819 	bl	800234e <HAL_PCD_Init>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007322:	f7f9 fb7d 	bl	8000a20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007326:	2180      	movs	r1, #128	; 0x80
 8007328:	4808      	ldr	r0, [pc, #32]	; (800734c <USBD_LL_Init+0x94>)
 800732a:	f7fc f976 	bl	800361a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800732e:	2240      	movs	r2, #64	; 0x40
 8007330:	2100      	movs	r1, #0
 8007332:	4806      	ldr	r0, [pc, #24]	; (800734c <USBD_LL_Init+0x94>)
 8007334:	f7fc f92a 	bl	800358c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007338:	2280      	movs	r2, #128	; 0x80
 800733a:	2101      	movs	r1, #1
 800733c:	4803      	ldr	r0, [pc, #12]	; (800734c <USBD_LL_Init+0x94>)
 800733e:	f7fc f925 	bl	800358c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20001b50 	.word	0x20001b50

08007350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007366:	4618      	mov	r0, r3
 8007368:	f7fb f90e 	bl	8002588 <HAL_PCD_Start>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f92a 	bl	80075cc <USBD_Get_USB_Status>
 8007378:	4603      	mov	r3, r0
 800737a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800737c:	7bbb      	ldrb	r3, [r7, #14]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	4608      	mov	r0, r1
 8007390:	4611      	mov	r1, r2
 8007392:	461a      	mov	r2, r3
 8007394:	4603      	mov	r3, r0
 8007396:	70fb      	strb	r3, [r7, #3]
 8007398:	460b      	mov	r3, r1
 800739a:	70bb      	strb	r3, [r7, #2]
 800739c:	4613      	mov	r3, r2
 800739e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073ae:	78bb      	ldrb	r3, [r7, #2]
 80073b0:	883a      	ldrh	r2, [r7, #0]
 80073b2:	78f9      	ldrb	r1, [r7, #3]
 80073b4:	f7fb fcf2 	bl	8002d9c <HAL_PCD_EP_Open>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f904 	bl	80075cc <USBD_Get_USB_Status>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fb fd3b 	bl	8002e6c <HAL_PCD_EP_Close>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 f8e5 	bl	80075cc <USBD_Get_USB_Status>
 8007402:	4603      	mov	r3, r0
 8007404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007406:	7bbb      	ldrb	r3, [r7, #14]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f7fb fe13 	bl	800305a <HAL_PCD_EP_SetStall>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f8c6 	bl	80075cc <USBD_Get_USB_Status>
 8007440:	4603      	mov	r3, r0
 8007442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007444:	7bbb      	ldrb	r3, [r7, #14]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7fb fe58 	bl	8003122 <HAL_PCD_EP_ClrStall>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f8a7 	bl	80075cc <USBD_Get_USB_Status>
 800747e:	4603      	mov	r3, r0
 8007480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007482:	7bbb      	ldrb	r3, [r7, #14]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800749e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da0b      	bge.n	80074c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	4613      	mov	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	333e      	adds	r3, #62	; 0x3e
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	e00b      	b.n	80074d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	4613      	mov	r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	1a9b      	subs	r3, r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	4611      	mov	r1, r2
 8007502:	4618      	mov	r0, r3
 8007504:	f7fb fc25 	bl	8002d52 <HAL_PCD_SetAddress>
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 f85c 	bl	80075cc <USBD_Get_USB_Status>
 8007514:	4603      	mov	r3, r0
 8007516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007518:	7bbb      	ldrb	r3, [r7, #14]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	460b      	mov	r3, r1
 8007530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007540:	7af9      	ldrb	r1, [r7, #11]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	f7fb fd3e 	bl	8002fc6 <HAL_PCD_EP_Transmit>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f83b 	bl	80075cc <USBD_Get_USB_Status>
 8007556:	4603      	mov	r3, r0
 8007558:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800755a:	7dbb      	ldrb	r3, [r7, #22]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	460b      	mov	r3, r1
 8007572:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007582:	7af9      	ldrb	r1, [r7, #11]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	f7fb fcba 	bl	8002f00 <HAL_PCD_EP_Receive>
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f81a 	bl	80075cc <USBD_Get_USB_Status>
 8007598:	4603      	mov	r3, r0
 800759a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800759c:	7dbb      	ldrb	r3, [r7, #22]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fb fcea 	bl	8002f96 <HAL_PCD_EP_GetRxCount>
 80075c2:	4603      	mov	r3, r0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d817      	bhi.n	8007610 <USBD_Get_USB_Status+0x44>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <USBD_Get_USB_Status+0x1c>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	080075ff 	.word	0x080075ff
 80075f0:	08007605 	.word	0x08007605
 80075f4:	0800760b 	.word	0x0800760b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
    break;
 80075fc:	e00b      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075fe:	2303      	movs	r3, #3
 8007600:	73fb      	strb	r3, [r7, #15]
    break;
 8007602:	e008      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
    break;
 8007608:	e005      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800760a:	2303      	movs	r3, #3
 800760c:	73fb      	strb	r3, [r7, #15]
    break;
 800760e:	e002      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	73fb      	strb	r3, [r7, #15]
    break;
 8007614:	bf00      	nop
  }
  return usb_status;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <__errno>:
 8007624:	4b01      	ldr	r3, [pc, #4]	; (800762c <__errno+0x8>)
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000190 	.word	0x20000190

08007630 <__libc_init_array>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	4e0d      	ldr	r6, [pc, #52]	; (8007668 <__libc_init_array+0x38>)
 8007634:	4c0d      	ldr	r4, [pc, #52]	; (800766c <__libc_init_array+0x3c>)
 8007636:	1ba4      	subs	r4, r4, r6
 8007638:	10a4      	asrs	r4, r4, #2
 800763a:	2500      	movs	r5, #0
 800763c:	42a5      	cmp	r5, r4
 800763e:	d109      	bne.n	8007654 <__libc_init_array+0x24>
 8007640:	4e0b      	ldr	r6, [pc, #44]	; (8007670 <__libc_init_array+0x40>)
 8007642:	4c0c      	ldr	r4, [pc, #48]	; (8007674 <__libc_init_array+0x44>)
 8007644:	f000 f8ea 	bl	800781c <_init>
 8007648:	1ba4      	subs	r4, r4, r6
 800764a:	10a4      	asrs	r4, r4, #2
 800764c:	2500      	movs	r5, #0
 800764e:	42a5      	cmp	r5, r4
 8007650:	d105      	bne.n	800765e <__libc_init_array+0x2e>
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007658:	4798      	blx	r3
 800765a:	3501      	adds	r5, #1
 800765c:	e7ee      	b.n	800763c <__libc_init_array+0xc>
 800765e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007662:	4798      	blx	r3
 8007664:	3501      	adds	r5, #1
 8007666:	e7f2      	b.n	800764e <__libc_init_array+0x1e>
 8007668:	08009390 	.word	0x08009390
 800766c:	08009390 	.word	0x08009390
 8007670:	08009390 	.word	0x08009390
 8007674:	08009394 	.word	0x08009394

08007678 <malloc>:
 8007678:	4b02      	ldr	r3, [pc, #8]	; (8007684 <malloc+0xc>)
 800767a:	4601      	mov	r1, r0
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	f000 b861 	b.w	8007744 <_malloc_r>
 8007682:	bf00      	nop
 8007684:	20000190 	.word	0x20000190

08007688 <free>:
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <free+0xc>)
 800768a:	4601      	mov	r1, r0
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	f000 b80b 	b.w	80076a8 <_free_r>
 8007692:	bf00      	nop
 8007694:	20000190 	.word	0x20000190

08007698 <memset>:
 8007698:	4402      	add	r2, r0
 800769a:	4603      	mov	r3, r0
 800769c:	4293      	cmp	r3, r2
 800769e:	d100      	bne.n	80076a2 <memset+0xa>
 80076a0:	4770      	bx	lr
 80076a2:	f803 1b01 	strb.w	r1, [r3], #1
 80076a6:	e7f9      	b.n	800769c <memset+0x4>

080076a8 <_free_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4605      	mov	r5, r0
 80076ac:	2900      	cmp	r1, #0
 80076ae:	d045      	beq.n	800773c <_free_r+0x94>
 80076b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b4:	1f0c      	subs	r4, r1, #4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bfb8      	it	lt
 80076ba:	18e4      	addlt	r4, r4, r3
 80076bc:	f000 f8ac 	bl	8007818 <__malloc_lock>
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <_free_r+0x98>)
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	4610      	mov	r0, r2
 80076c6:	b933      	cbnz	r3, 80076d6 <_free_r+0x2e>
 80076c8:	6063      	str	r3, [r4, #4]
 80076ca:	6014      	str	r4, [r2, #0]
 80076cc:	4628      	mov	r0, r5
 80076ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d2:	f000 b8a2 	b.w	800781a <__malloc_unlock>
 80076d6:	42a3      	cmp	r3, r4
 80076d8:	d90c      	bls.n	80076f4 <_free_r+0x4c>
 80076da:	6821      	ldr	r1, [r4, #0]
 80076dc:	1862      	adds	r2, r4, r1
 80076de:	4293      	cmp	r3, r2
 80076e0:	bf04      	itt	eq
 80076e2:	681a      	ldreq	r2, [r3, #0]
 80076e4:	685b      	ldreq	r3, [r3, #4]
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	bf04      	itt	eq
 80076ea:	1852      	addeq	r2, r2, r1
 80076ec:	6022      	streq	r2, [r4, #0]
 80076ee:	6004      	str	r4, [r0, #0]
 80076f0:	e7ec      	b.n	80076cc <_free_r+0x24>
 80076f2:	4613      	mov	r3, r2
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	b10a      	cbz	r2, 80076fc <_free_r+0x54>
 80076f8:	42a2      	cmp	r2, r4
 80076fa:	d9fa      	bls.n	80076f2 <_free_r+0x4a>
 80076fc:	6819      	ldr	r1, [r3, #0]
 80076fe:	1858      	adds	r0, r3, r1
 8007700:	42a0      	cmp	r0, r4
 8007702:	d10b      	bne.n	800771c <_free_r+0x74>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	4401      	add	r1, r0
 8007708:	1858      	adds	r0, r3, r1
 800770a:	4282      	cmp	r2, r0
 800770c:	6019      	str	r1, [r3, #0]
 800770e:	d1dd      	bne.n	80076cc <_free_r+0x24>
 8007710:	6810      	ldr	r0, [r2, #0]
 8007712:	6852      	ldr	r2, [r2, #4]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	4401      	add	r1, r0
 8007718:	6019      	str	r1, [r3, #0]
 800771a:	e7d7      	b.n	80076cc <_free_r+0x24>
 800771c:	d902      	bls.n	8007724 <_free_r+0x7c>
 800771e:	230c      	movs	r3, #12
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	e7d3      	b.n	80076cc <_free_r+0x24>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	1821      	adds	r1, r4, r0
 8007728:	428a      	cmp	r2, r1
 800772a:	bf04      	itt	eq
 800772c:	6811      	ldreq	r1, [r2, #0]
 800772e:	6852      	ldreq	r2, [r2, #4]
 8007730:	6062      	str	r2, [r4, #4]
 8007732:	bf04      	itt	eq
 8007734:	1809      	addeq	r1, r1, r0
 8007736:	6021      	streq	r1, [r4, #0]
 8007738:	605c      	str	r4, [r3, #4]
 800773a:	e7c7      	b.n	80076cc <_free_r+0x24>
 800773c:	bd38      	pop	{r3, r4, r5, pc}
 800773e:	bf00      	nop
 8007740:	20000620 	.word	0x20000620

08007744 <_malloc_r>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	1ccd      	adds	r5, r1, #3
 8007748:	f025 0503 	bic.w	r5, r5, #3
 800774c:	3508      	adds	r5, #8
 800774e:	2d0c      	cmp	r5, #12
 8007750:	bf38      	it	cc
 8007752:	250c      	movcc	r5, #12
 8007754:	2d00      	cmp	r5, #0
 8007756:	4606      	mov	r6, r0
 8007758:	db01      	blt.n	800775e <_malloc_r+0x1a>
 800775a:	42a9      	cmp	r1, r5
 800775c:	d903      	bls.n	8007766 <_malloc_r+0x22>
 800775e:	230c      	movs	r3, #12
 8007760:	6033      	str	r3, [r6, #0]
 8007762:	2000      	movs	r0, #0
 8007764:	bd70      	pop	{r4, r5, r6, pc}
 8007766:	f000 f857 	bl	8007818 <__malloc_lock>
 800776a:	4a21      	ldr	r2, [pc, #132]	; (80077f0 <_malloc_r+0xac>)
 800776c:	6814      	ldr	r4, [r2, #0]
 800776e:	4621      	mov	r1, r4
 8007770:	b991      	cbnz	r1, 8007798 <_malloc_r+0x54>
 8007772:	4c20      	ldr	r4, [pc, #128]	; (80077f4 <_malloc_r+0xb0>)
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	b91b      	cbnz	r3, 8007780 <_malloc_r+0x3c>
 8007778:	4630      	mov	r0, r6
 800777a:	f000 f83d 	bl	80077f8 <_sbrk_r>
 800777e:	6020      	str	r0, [r4, #0]
 8007780:	4629      	mov	r1, r5
 8007782:	4630      	mov	r0, r6
 8007784:	f000 f838 	bl	80077f8 <_sbrk_r>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d124      	bne.n	80077d6 <_malloc_r+0x92>
 800778c:	230c      	movs	r3, #12
 800778e:	6033      	str	r3, [r6, #0]
 8007790:	4630      	mov	r0, r6
 8007792:	f000 f842 	bl	800781a <__malloc_unlock>
 8007796:	e7e4      	b.n	8007762 <_malloc_r+0x1e>
 8007798:	680b      	ldr	r3, [r1, #0]
 800779a:	1b5b      	subs	r3, r3, r5
 800779c:	d418      	bmi.n	80077d0 <_malloc_r+0x8c>
 800779e:	2b0b      	cmp	r3, #11
 80077a0:	d90f      	bls.n	80077c2 <_malloc_r+0x7e>
 80077a2:	600b      	str	r3, [r1, #0]
 80077a4:	50cd      	str	r5, [r1, r3]
 80077a6:	18cc      	adds	r4, r1, r3
 80077a8:	4630      	mov	r0, r6
 80077aa:	f000 f836 	bl	800781a <__malloc_unlock>
 80077ae:	f104 000b 	add.w	r0, r4, #11
 80077b2:	1d23      	adds	r3, r4, #4
 80077b4:	f020 0007 	bic.w	r0, r0, #7
 80077b8:	1ac3      	subs	r3, r0, r3
 80077ba:	d0d3      	beq.n	8007764 <_malloc_r+0x20>
 80077bc:	425a      	negs	r2, r3
 80077be:	50e2      	str	r2, [r4, r3]
 80077c0:	e7d0      	b.n	8007764 <_malloc_r+0x20>
 80077c2:	428c      	cmp	r4, r1
 80077c4:	684b      	ldr	r3, [r1, #4]
 80077c6:	bf16      	itet	ne
 80077c8:	6063      	strne	r3, [r4, #4]
 80077ca:	6013      	streq	r3, [r2, #0]
 80077cc:	460c      	movne	r4, r1
 80077ce:	e7eb      	b.n	80077a8 <_malloc_r+0x64>
 80077d0:	460c      	mov	r4, r1
 80077d2:	6849      	ldr	r1, [r1, #4]
 80077d4:	e7cc      	b.n	8007770 <_malloc_r+0x2c>
 80077d6:	1cc4      	adds	r4, r0, #3
 80077d8:	f024 0403 	bic.w	r4, r4, #3
 80077dc:	42a0      	cmp	r0, r4
 80077de:	d005      	beq.n	80077ec <_malloc_r+0xa8>
 80077e0:	1a21      	subs	r1, r4, r0
 80077e2:	4630      	mov	r0, r6
 80077e4:	f000 f808 	bl	80077f8 <_sbrk_r>
 80077e8:	3001      	adds	r0, #1
 80077ea:	d0cf      	beq.n	800778c <_malloc_r+0x48>
 80077ec:	6025      	str	r5, [r4, #0]
 80077ee:	e7db      	b.n	80077a8 <_malloc_r+0x64>
 80077f0:	20000620 	.word	0x20000620
 80077f4:	20000624 	.word	0x20000624

080077f8 <_sbrk_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4c06      	ldr	r4, [pc, #24]	; (8007814 <_sbrk_r+0x1c>)
 80077fc:	2300      	movs	r3, #0
 80077fe:	4605      	mov	r5, r0
 8007800:	4608      	mov	r0, r1
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	f7f9 fdb8 	bl	8001378 <_sbrk>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_sbrk_r+0x1a>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	b103      	cbz	r3, 8007812 <_sbrk_r+0x1a>
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	20001f58 	.word	0x20001f58

08007818 <__malloc_lock>:
 8007818:	4770      	bx	lr

0800781a <__malloc_unlock>:
 800781a:	4770      	bx	lr

0800781c <_init>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	bf00      	nop
 8007820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007822:	bc08      	pop	{r3}
 8007824:	469e      	mov	lr, r3
 8007826:	4770      	bx	lr

08007828 <_fini>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr
